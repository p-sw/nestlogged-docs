/*@jsxRuntime automatic*/
/*@jsxImportSource react*/
export const tableOfContents = [{
  "depth": 1,
  "value": "NestLogged에 대하여",
  "id": "nestlogged에-대하여"
}, {
  "depth": 1,
  "value": "NestLogged 로거 적용",
  "id": "nestlogged-로거-적용"
}, {
  "depth": 1,
  "value": "@nestjs/platform-fastify와 사용하기",
  "id": "nestjsplatform-fastify와-사용하기"
}, {
  "depth": 1,
  "value": "메서드에 로그 붙이기",
  "id": "메서드에-로그-붙이기",
  "children": [{
    "depth": 2,
    "value": "데코레이터 옵션",
    "id": "데코레이터-옵션"
  }, {
    "depth": 2,
    "value": "전체 메서드 일괄 로깅",
    "id": "전체-메서드-일괄-로깅"
  }]
}, {
  "depth": 1,
  "value": "호출 파라미터 로그",
  "id": "호출-파라미터-로그",
  "children": [{
    "depth": 2,
    "value": "데코레이터 파라미터",
    "id": "데코레이터-파라미터",
    "children": [{
      "depth": 3,
      "value": "name (필수)",
      "id": "name-필수"
    }, {
      "depth": 3,
      "value": "Options (선택)",
      "id": "options-선택"
    }, {
      "depth": 3,
      "value": "Each",
      "id": "each"
    }]
  }]
}, {
  "depth": 1,
  "value": "종료 반환값 로그",
  "id": "종료-반환값-로그"
}, {
  "depth": 1,
  "value": "기타 특수함수 로그",
  "id": "기타-특수함수-로그"
}, {
  "depth": 1,
  "value": "로그 주입과 범위 로깅",
  "id": "로그-주입과-범위-로깅"
}, {
  "depth": 1,
  "value": "추가: Pino 적용하기",
  "id": "추가-pino-적용하기"
}];
function _createMdxContent(props) {
  const _components = {
    a: "a",
    blockquote: "blockquote",
    br: "br",
    circle: "circle",
    code: "code",
    div: "div",
    g: "g",
    h1: "h1",
    h2: "h2",
    h3: "h3",
    header: "header",
    hr: "hr",
    li: "li",
    p: "p",
    path: "path",
    pre: "pre",
    span: "span",
    strong: "strong",
    svg: "svg",
    ul: "ul",
    ...props.components
  };
  return <><_components.p>{"이 문서에서는 NestLogged에 대해 아무것도 모른다는 전제 하에 처음부터 끝까지 NestLogged의 모든 "}<_components.strong>{"기능 사용법"}</_components.strong>{"을 설명합니다."}</_components.p>{"\n"}<_components.p>{"NestLogged를 처음 접하는 분에게 추천합니다."}</_components.p>{"\n"}<_components.h1 id="nestlogged에-대하여">{"NestLogged에 대하여"}</_components.h1>{"\n"}<_components.p>{"NestLogged는 NestJS를 위한 간단한 데코레이터를 제공하며, 여러 복잡한 로깅을 간단하게 적용할 수 있도록 도와줍니다."}</_components.p>{"\n"}<_components.p>{"NestLogged가 제공하는 기능은 다음과 같습니다."}</_components.p>{"\n"}<_components.ul>{"\n"}<_components.li>{"함수의 호출과 종료, 오류 로그 ("}<_components.strong>{"NestLogged의 핵심이자 기반입니다!"}</_components.strong>{")"}</_components.li>{"\n"}<_components.li>{"함수의 호출 시 파라미터 로그"}{"\n"}<_components.ul>{"\n"}<_components.li>{"파라미터가 object 또는 array일 경우 일부 프로퍼티의 숨김 또는 선택 지원"}</_components.li>{"\n"}</_components.ul>{"\n"}</_components.li>{"\n"}<_components.li>{"함수의 종료 시 반환값 로그"}</_components.li>{"\n"}<_components.li>{"함수의 호출 흐름을 따라 trace log 표시 (Scope라고 부릅니다)"}</_components.li>{"\n"}<_components.li>{"고유한 Request에 대한 ID 표시"}</_components.li>{"\n"}</_components.ul>{"\n"}<_components.p>{"예시 로그 출력을 보여드리겠습니다:"}</_components.p>{"\n"}<_components.pre><_components.code className="hljs language-log" data-language="log">{"LOG [AppMiddleware] ID=[nPcz74xbRvm2IB0rTR6B2g/0000000001] | AppMiddleware.AppMiddleware: HIT MIDDLEWARE AppMiddleware.AppMiddleware (/)\nLOG [AppMiddleware] ID=[nPcz74xbRvm2IB0rTR6B2g/0000000001] | AppMiddleware.AppMiddleware: Hello from Middleware!\nLOG [AppGuard] ID=[nPcz74xbRvm2IB0rTR6B2g/0000000001] | AppGuard.AppGuard: HIT GUARD AppGuard.AppGuard (/)\nLOG [AppGuard] ID=[nPcz74xbRvm2IB0rTR6B2g/0000000001] | AppGuard.AppGuard: Hello from Guard!\nLOG [AppGuard] ID=[nPcz74xbRvm2IB0rTR6B2g/0000000001] | AppGuard.AppGuard: RETURNED GUARD AppGuard.AppGuard (/)\nLOG [AppMiddleware] ID=[nPcz74xbRvm2IB0rTR6B2g/0000000001] | AppMiddleware.AppMiddleware: RETURNED MIDDLEWARE AppMiddleware.AppMiddleware (/)\nLOG [AppController] ID=[nPcz74xbRvm2IB0rTR6B2g/0000000001] | AppController.getHello: HIT ENDPOINT AppController.getHello (AppController::/[GET])\nLOG [AppService] ID=[nPcz74xbRvm2IB0rTR6B2g/0000000001] | AppController.getHello -> AppService.getHello: HIT FUNCTION AppService.getHello WITH value=i\nLOG [AppService] ID=[nPcz74xbRvm2IB0rTR6B2g/0000000001] | AppController.getHello -> AppService.getHello: Hello from AppService!\nLOG [AppService] ID=[nPcz74xbRvm2IB0rTR6B2g/0000000001] | AppController.getHello -> AppService.getHello: RETURNED FUNCTION AppService.getHello\nLOG [AppController] ID=[nPcz74xbRvm2IB0rTR6B2g/0000000001] | AppController.getHello: RETURNED ENDPOINT AppController.getHello (AppController::/[GET]) WITH i\n"}</_components.code></_components.pre>{"\n"}<_components.p>{"재미있는 점은 이 로그들이 간단한 데코레이터 몇 개로 이루어질 수 있는 것이라는 점입니다.\n지금부터 하나씩 어떻게 하는지 알려드리겠습니다."}</_components.p>{"\n"}<_components.hr />{"\n"}<_components.h1 id="nestlogged-로거-적용">{"NestLogged 로거 적용"}</_components.h1>{"\n"}<_components.p>{"NestLogged에서는 NestJS의 기본 ConsoleLogger를 확장한 새로운 ConsoleLogger를 제공합니다."}</_components.p>{"\n"}<_components.p>{"새로운 ConsoleLogger는 NestLogged의 핵심 기능을 포함하고 있고, 이 ConsoleLogger가 없다면 일부 기능을 사용할 때 출력이 제대로 이뤄지지 않을 수 있습니다.\n따라서 이 ConsoleLogger를 사용하실 것을 "}<_components.strong>{"권장"}</_components.strong>{"합니다."}</_components.p>{"\n"}<_components.p>{"만약 ConsoleLogger를 사용하지 않고 nestjs의 기본값을 사용하실 경우 오류는 나지 않습니다만, 출력이 이상하게 꼬이거나 예상치 못한 출력이 있을 수도 있습니다."}</_components.p>{"\n"}<_components.p>{"자세한 내용은 [로그 주입과 범위 로깅](#로그 주입과 범위 로깅) 섹션에서 설명합니다."}</_components.p>{"\n"}<_components.p>{"NestLogged의 ConsoleLogger를 적용하는 방법은 다음과 같습니다."}</_components.p>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"main.ts"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"NestFactory"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'@nestjs/core'"}</_components.span>{";\n"}<_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"AppModule"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'./app.module'"}</_components.span>{";\n"}<_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"ConsoleLogger"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'nestlogged'"}</_components.span>{"; "}<_components.span className="hljs-comment">{"// NestLogged의 ConsoleLogger를 가져옵니다"}</_components.span>{"\n\n"}<_components.span className="hljs-keyword">{"async"}</_components.span>{" "}<_components.span className="hljs-keyword">{"function"}</_components.span>{" "}<_components.span className="hljs-title function_">{"bootstrap"}</_components.span>{"("}<_components.span className="hljs-params" />{") {\n  "}<_components.span className="hljs-keyword">{"const"}</_components.span>{" app = "}<_components.span className="hljs-keyword">{"await"}</_components.span>{" "}<_components.span className="hljs-title class_">{"NestFactory"}</_components.span>{"."}<_components.span className="hljs-title function_">{"create"}</_components.span>{"("}<_components.span className="hljs-title class_">{"AppModule"}</_components.span>{", {\n    "}<_components.span className="hljs-attr">{"logger"}</_components.span>{": "}<_components.span className="hljs-keyword">{"new"}</_components.span>{" "}<_components.span className="hljs-title class_">{"ConsoleLogger"}</_components.span>{"(), "}<_components.span className="hljs-comment">{"// ConsoleLogger를 NestJS에 적용합니다"}</_components.span>{"\n  });\n  "}<_components.span className="hljs-keyword">{"await"}</_components.span>{" app."}<_components.span className="hljs-title function_">{"listen"}</_components.span>{"(process."}<_components.span className="hljs-property">{"env"}</_components.span>{"."}<_components.span className="hljs-property">{"PORT"}</_components.span>{" ?? "}<_components.span className="hljs-number">{"3000"}</_components.span>{");\n}\n"}<_components.span className="hljs-title function_">{"bootstrap"}</_components.span>{"();\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.p>{"이 문서의 아래에서는 pino와 같은 서드파티 로깅 패키지를 NestLogged 패키지와 함께 쓰는 방법도 설명합니다."}</_components.p>{"\n"}<_components.blockquote className="remark-callout remark-callout__info">{"\n"}<_components.header className="remark-callout-header"><_components.svg xmlns="http://www.w3.org/2000/svg" className="lucide-info" width="32" height="32" viewBox="0 0 24 24"><_components.g fill="none" stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2"><_components.circle cx="12" cy="12" r="10" /><_components.path d="M12 16v-4m0-4h.01" /></_components.g></_components.svg>{"Info"}</_components.header>{"\n"}<_components.p>{"NestJS에서 로거를 확장하는 방법에 대해 더 자세히 알아보려면 다음 링크를 확인해보세요."}<_components.br />{"\n"}<_components.a href="https://docs.nestjs.com/techniques/logger#extend-built-in-logger">{"Documentation | NestJS - A progressive Node.js framework"}</_components.a></_components.p>{"\n"}</_components.blockquote>{"\n"}<_components.hr />{"\n"}<_components.h1 id="nestjsplatform-fastify와-사용하기">{"@nestjs/platform-fastify와 사용하기"}</_components.h1>{"\n"}<_components.p>{"위와 같은 이유로, fastify를 nestjs와 함께 사용할 경우 nestlogged의 일부 기능에서 오류가 발생할 수 있습니다."}</_components.p>{"\n"}<_components.p>{"따라서, 오류를 피하기 위해 "}<_components.strong>{"반드시"}</_components.strong>{" "}<_components.code>{"nestlogged-fastify"}</_components.code>{" 패키지를 사용해야 합니다."}</_components.p>{"\n"}<_components.p><_components.code>{"nestlogged"}</_components.code>{"와 "}<_components.code>{"nestlogged-fastify"}</_components.code>{"는 크게 다르지 않고, 단순히 import 시 패키지명을 바꿔주는 것 만으로 충분합니다."}</_components.p>{"\n"}<_components.p>{"내부 로직이 다를 뿐 타입은 완벽히 일치합니다."}</_components.p>{"\n"}<_components.hr />{"\n"}<_components.h1 id="메서드에-로그-붙이기">{"메서드에 로그 붙이기"}</_components.h1>{"\n"}<_components.p>{"NestLogged에서 가장 기초이자 기반은 메서드에 호출 / 종료 / 오류 로그를 붙이는 것입니다."}</_components.p>{"\n"}<_components.p>{"이 역할을 담당하는 기본적인 데코레이터는 "}<_components.code>{"@LoggedFunction()"}</_components.code>{" 과 "}<_components.code>{"@LoggedRoute()"}</_components.code>{" 입니다."}</_components.p>{"\n"}<_components.ul>{"\n"}<_components.li><_components.code>{"@LoggedFunction()"}</_components.code>{" - Service 등 일반적인 메서드에 사용됩니다."}</_components.li>{"\n"}<_components.li><_components.code>{"@LoggedRoute()"}</_components.code>{" - Controller의 메서드에 사용됩니다. "}<_components.code>{"@LoggedFunction()"}</_components.code>{" 에 더해 추가로 엔드포인트의 path와 method를 수집합니다."}</_components.li>{"\n"}</_components.ul>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"app.controller.ts"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"Controller"}</_components.span>{", "}<_components.span className="hljs-title class_">{"Get"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'@nestjs/common'"}</_components.span>{";\n"}<_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"AppService"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'./app.service'"}</_components.span>{";\n"}<_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"LoggedRoute"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'nestlogged'"}</_components.span>{";\n\n"}<_components.span className="hljs-meta">{"@Controller"}</_components.span>{"()\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"class"}</_components.span>{" "}<_components.span className="hljs-title class_">{"AppController"}</_components.span>{" {\n  "}<_components.span className="hljs-title function_">{"constructor"}</_components.span>{"("}<_components.span className="hljs-params"><_components.span className="hljs-keyword">{"private"}</_components.span>{" "}<_components.span className="hljs-keyword">{"readonly"}</_components.span>{" "}<_components.span className="hljs-attr">{"appService"}</_components.span>{": "}<_components.span className="hljs-title class_">{"AppService"}</_components.span></_components.span>{") {}\n\n  "}<_components.span className="hljs-meta">{"@LoggedRoute"}</_components.span>{"() "}<_components.span className="hljs-comment">{"// 이 엔드포인트의 호출과 종료가 로그됩니다."}</_components.span>{"\n  "}<_components.span className="hljs-meta">{"@Get"}</_components.span>{"()\n  "}<_components.span className="hljs-title function_">{"getHello"}</_components.span>{"(): "}<_components.span className="hljs-built_in">{"string"}</_components.span>{" {\n    "}<_components.span className="hljs-keyword">{"return"}</_components.span>{" "}<_components.span className="hljs-variable language_">{"this"}</_components.span>{"."}<_components.span className="hljs-property">{"appService"}</_components.span>{"."}<_components.span className="hljs-title function_">{"getHello"}</_components.span>{"();\n  }\n}\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"app.service.ts"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"Injectable"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'@nestjs/common'"}</_components.span>{";\n"}<_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"LoggedFunction"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'nestlogged'"}</_components.span>{";\n\n"}<_components.span className="hljs-meta">{"@Injectable"}</_components.span>{"()\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"class"}</_components.span>{" "}<_components.span className="hljs-title class_">{"AppService"}</_components.span>{" {\n  "}<_components.span className="hljs-meta">{"@LoggedFunction"}</_components.span>{"() "}<_components.span className="hljs-comment">{"// 이 함수의 호출과 종료가 로그됩니다."}</_components.span>{"\n  "}<_components.span className="hljs-title function_">{"getHello"}</_components.span>{"(): "}<_components.span className="hljs-built_in">{"string"}</_components.span>{" {\n    "}<_components.span className="hljs-keyword">{"return"}</_components.span>{" "}<_components.span className="hljs-string">{"'Hello!'"}</_components.span>{";\n  }\n}\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"로그 출력"}</_components.div><_components.div className="remark-code-meta__lang">{"Log"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-log" data-language="log">{"LOG [AppController] HIT ENDPOINT AppController.getHello (AppController::/[GET])\nLOG [AppService] HIT FUNCTION AppService.getHello\nLOG [AppService] RETURNED FUNCTION AppService.getHello\nLOG [AppController] RETURNED ENDPOINT AppController.getHello (AppController::/[GET])\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.blockquote className="remark-callout remark-callout__warning">{"\n"}<_components.header className="remark-callout-header"><_components.svg xmlns="http://www.w3.org/2000/svg" className="lucide-warning" width="32" height="32" viewBox="0 0 24 24"><_components.path fill="none" stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="m21.73 18l-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3M12 9v4m0 4h.01" /></_components.svg>{"Warning"}</_components.header>{"\n"}<_components.p><_components.code>{"@LoggedRoute()"}</_components.code>{"를 사용할 때는 데코레이터의 순서에 주의해야 합니다."}<_components.br />{"\n"}{"항상 "}<_components.code>{"@LoggedRoute()"}</_components.code>{"가 "}<_components.code>{"@Get()"}</_components.code>{", "}<_components.code>{"@Post()"}</_components.code>{" 등의 데코레이터보다 "}<_components.strong>{"먼저 오도록 배치"}</_components.strong>{"하세요."}</_components.p>{"\n"}<_components.p><_components.code>{"@Get()"}</_components.code>{"과 "}<_components.code>{"@Post()"}</_components.code>{"와 같은 HTTP 메서드 데코레이터는 적용되는 메서드에 path와 method를 메타데이터로 추가합니다. "}<_components.code>{"@LoggedRoute()"}</_components.code>{"는 이 메타데이터를 읽어오는 작업을 수행하는데, HTTP 메서드 데코레이터보다 먼저 수행될 경우 읽어올 메타데이터가 없어 undefined로 표시됩니다."}</_components.p>{"\n"}<_components.p>{"순서가 헷갈린다면, 데코레이터가 "}<_components.code>{"LoggedRoute(Get(getHello))"}</_components.code>{"와 같이 작동한다는 것을 기억하세요."}</_components.p>{"\n"}</_components.blockquote>{"\n"}<_components.h2 id="데코레이터-옵션">{"데코레이터 옵션"}</_components.h2>{"\n"}<_components.p><_components.code>{"@LoggedRoute()"}</_components.code>{"와 "}<_components.code>{"@LoggedFunction()"}</_components.code>{"을 설정하기 위해서 옵션을 줄 수 있습니다."}</_components.p>{"\n"}<_components.p>{"두 데코레이터 모두 동일한 타입의 옵션을 받으며, 옵션의 형태와 기본값은 다음과 같습니다."}</_components.p>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"옵션의 타입 정의 (src/logged/utils.ts)"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"interface"}</_components.span>{" "}<_components.span className="hljs-title class_">{"OverrideBuildOptions"}</_components.span>{" {\n  "}<_components.span className="hljs-attr">{"callLogLevel"}</_components.span>{": "}<_components.span className="hljs-title class_">{"LogLevel"}</_components.span>{" | "}<_components.span className="hljs-string">{"'skip'"}</_components.span>{";\n  "}<_components.span className="hljs-attr">{"returnLogLevel"}</_components.span>{": "}<_components.span className="hljs-title class_">{"LogLevel"}</_components.span>{" | "}<_components.span className="hljs-string">{"'skip'"}</_components.span>{";\n  "}<_components.span className="hljs-attr">{"errorLogLevel"}</_components.span>{": "}<_components.span className="hljs-title class_">{"LogLevel"}</_components.span>{" | "}<_components.span className="hljs-string">{"'skip'"}</_components.span>{";\n}\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"옵션 기본값 (src/logged/utils.ts)"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"const"}</_components.span>{" "}<_components.span className="hljs-attr">{"defaultOverrideBuildOptions"}</_components.span>{": "}<_components.span className="hljs-title class_">{"OverrideBuildOptions"}</_components.span>{" = {\n  "}<_components.span className="hljs-attr">{"callLogLevel"}</_components.span>{": "}<_components.span className="hljs-string">{"'log'"}</_components.span>{",\n  "}<_components.span className="hljs-attr">{"returnLogLevel"}</_components.span>{": "}<_components.span className="hljs-string">{"'log'"}</_components.span>{",\n  "}<_components.span className="hljs-attr">{"errorLogLevel"}</_components.span>{": "}<_components.span className="hljs-string">{"'error'"}</_components.span>{",\n};\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.h2 id="전체-메서드-일괄-로깅">{"전체 메서드 일괄 로깅"}</_components.h2>{"\n"}<_components.p>{"클래스 내의 모든 메서드에 일일히 데코레이터를 붙이는 것은 매우 번거로운 일이 될 것이 분명하므로, 그러한 형태를 피하기 위해 클래스에 적용했을 때 클래스 내의 모든 메서드에 "}<_components.code>{"@LoggedRoute()"}</_components.code>{" 또는 "}<_components.code>{"@LoggedFunction()"}</_components.code>{"을 적용하는 클래스 데코레이터를 제공합니다."}</_components.p>{"\n"}<_components.ul>{"\n"}<_components.li><_components.code>{"@LoggedController()"}</_components.code>{" - 클래스에 NestJS의 "}<_components.code>{"@Controller()"}</_components.code>{" 데코레이터를 적용시키고, 모든 메서드에 "}<_components.code>{"@LoggedRoute()"}</_components.code>{" 데코레이터를 일괄 적용시킵니다."}</_components.li>{"\n"}<_components.li><_components.code>{"@LoggedInjectable()"}</_components.code>{" - 클래스에 NestJS의 "}<_components.code>{"@Injectable()"}</_components.code>{" 데코레이터를 적용시키고, 모든 메서드에 "}<_components.code>{"@LoggedFunction()"}</_components.code>{" 데코레이터를 일괄 적용시킵니다."}</_components.li>{"\n"}</_components.ul>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"app.controller.ts"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"Get"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'@nestjs/common'"}</_components.span>{";\n"}<_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"AppService"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'./app.service'"}</_components.span>{";\n"}<_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"LoggedController"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'nestlogged'"}</_components.span>{";\n\n"}<_components.span className="hljs-comment">{"// 이 컨트롤러의 모든 메서드에 @LoggedRoute()를 적용합니다."}</_components.span>{"\n"}<_components.span className="hljs-meta">{"@LoggedController"}</_components.span>{"() "}<_components.span className="hljs-comment">{"// 또한 NestJS의 @Controller를 대체할 수 있습니다."}</_components.span>{"\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"class"}</_components.span>{" "}<_components.span className="hljs-title class_">{"AppController"}</_components.span>{" {\n  "}<_components.span className="hljs-title function_">{"constructor"}</_components.span>{"("}<_components.span className="hljs-params"><_components.span className="hljs-keyword">{"private"}</_components.span>{" "}<_components.span className="hljs-keyword">{"readonly"}</_components.span>{" "}<_components.span className="hljs-attr">{"appService"}</_components.span>{": "}<_components.span className="hljs-title class_">{"AppService"}</_components.span></_components.span>{") {}\n\n  "}<_components.span className="hljs-meta">{"@Get"}</_components.span>{"()\n  "}<_components.span className="hljs-title function_">{"getHello"}</_components.span>{"(): "}<_components.span className="hljs-built_in">{"string"}</_components.span>{" {\n    "}<_components.span className="hljs-keyword">{"return"}</_components.span>{" "}<_components.span className="hljs-variable language_">{"this"}</_components.span>{"."}<_components.span className="hljs-property">{"appService"}</_components.span>{"."}<_components.span className="hljs-title function_">{"getHello"}</_components.span>{"();\n  }\n}\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"app.service.ts"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"LoggedInjectable"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'nestlogged'"}</_components.span>{";\n\n"}<_components.span className="hljs-comment">{"// 이 서비스의 모든 메서드에 @LoggedFunction()을 적용합니다."}</_components.span>{"\n"}<_components.span className="hljs-meta">{"@LoggedInjectable"}</_components.span>{"() "}<_components.span className="hljs-comment">{"// 또한 NestJS의 @Injectable()을 대체할 수 있습니다."}</_components.span>{"\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"class"}</_components.span>{" "}<_components.span className="hljs-title class_">{"AppService"}</_components.span>{" {\n  "}<_components.span className="hljs-title function_">{"getHello"}</_components.span>{"(): "}<_components.span className="hljs-built_in">{"string"}</_components.span>{" {\n    "}<_components.span className="hljs-keyword">{"return"}</_components.span>{" "}<_components.span className="hljs-string">{"'Hello!'"}</_components.span>{";\n  }\n}\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.p>{"메서드를 일괄 로깅해주는 클래스 데코레이터를 사용하면 쓸데없는 코드의 반복을 줄이고, 또한 "}<_components.code>{"@LoggedRoute()"}</_components.code>{" 데코레이터의 위치에 대해 고민할 필요가 없어집니다."}</_components.p>{"\n"}<_components.hr />{"\n"}<_components.h1 id="호출-파라미터-로그">{"호출 파라미터 로그"}</_components.h1>{"\n"}<_components.p>{"호출 시의 파라미터를 로그에 포함하기 위해서는 "}<_components.code>{"@Logged()"}</_components.code>{" 데코레이터를 사용해야 합니다."}</_components.p>{"\n"}<_components.p>{"로그에 포함하기를 원하는 파라미터의 앞에 "}<_components.code>{"@Logged()"}</_components.code>{" 를 붙여 적용시킬 수 있습니다."}</_components.p>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"app.service.ts"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-meta">{"@LoggedInjectable"}</_components.span>{"()\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"class"}</_components.span>{" "}<_components.span className="hljs-title class_">{"AppService"}</_components.span>{" {\n  "}<_components.span className="hljs-comment">{"/* message 파라미터가 로그됩니다. */"}</_components.span>{"\n  "}<_components.span className="hljs-title function_">{"getMessage"}</_components.span>{"("}<_components.span className="hljs-meta">{"@Logged"}</_components.span>{"("}<_components.span className="hljs-string">{"'message'"}</_components.span>{") "}<_components.span className="hljs-attr">{"message"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{"): "}<_components.span className="hljs-built_in">{"string"}</_components.span>{" {\n    "}<_components.span className="hljs-keyword">{"return"}</_components.span>{" message;\n  }\n}\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"출력 로그"}</_components.div><_components.div className="remark-code-meta__lang">{"Log"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-log" data-language="log">{"LOG [AppController] HIT ENDPOINT AppController.getHello (AppController::/[GET])\nLOG [AppService] HIT FUNCTION AppService.getMessage WITH message=Hello!\nLOG [AppService] RETURNED FUNCTION AppService.getMessage\nLOG [AppController] RETURNED ENDPOINT AppController.getHello (AppController::/[GET])\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.p>{"데코레이터의 첫 번째 파라미터는 기록될 파라미터의 이름을 결정합니다."}</_components.p>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"app.service.ts"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-meta">{"@LoggedInjectable"}</_components.span>{"()\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"class"}</_components.span>{" "}<_components.span className="hljs-title class_">{"AppService"}</_components.span>{" {\n  "}<_components.span className="hljs-comment">{"/* 파라미터 이름은 message지만 otherName으로 기록할 수도 있습니다. */"}</_components.span>{"\n  "}<_components.span className="hljs-title function_">{"getMessage"}</_components.span>{"("}<_components.span className="hljs-meta">{"@Logged"}</_components.span>{"("}<_components.span className="hljs-string">{"'otherName'"}</_components.span>{") "}<_components.span className="hljs-attr">{"message"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{"): "}<_components.span className="hljs-built_in">{"string"}</_components.span>{" {\n    "}<_components.span className="hljs-keyword">{"return"}</_components.span>{" message;\n  }\n}\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"출력 로그"}</_components.div><_components.div className="remark-code-meta__lang">{"Log"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-log" data-language="log">{"LOG [AppController] HIT ENDPOINT AppController.getHello (AppController::/[GET])\nLOG [AppService] HIT FUNCTION AppService.getMessage WITH otherName=Hello!\nLOG [AppService] RETURNED FUNCTION AppService.getMessage\nLOG [AppController] RETURNED ENDPOINT AppController.getHello (AppController::/[GET])\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.h2 id="데코레이터-파라미터">{"데코레이터 파라미터"}</_components.h2>{"\n"}<_components.h3 id="name-필수">{"name (필수)"}</_components.h3>{"\n"}<_components.p>{"TypeScript에서는 파라미터에 데코레이터를 적용시킬 때 데코레이터에 대한 파라미터의 정보를 넘겨줍니다.\n이 때, 넘어가는 정보들 중 파라미터의 이름에 대한 부분은 "}<_components.strong>{"존재하지 않습니다."}</_components.strong></_components.p>{"\n"}<_components.p>{"따라서, 데코레이터는 어떤 방식으로든 적용되는 파라미터의 이름을 "}<_components.strong>{"알 수 없고"}</_components.strong>{", 때문에 사용자가 직접 이름을 넘겨줘야 합니다."}</_components.p>{"\n"}<_components.h3 id="options-선택">{"Options (선택)"}</_components.h3>{"\n"}<_components.p><_components.code>{"@Logged()"}</_components.code>{" 데코레이터가 붙은 파라미터의 값이 object일 경우, 로그 시 "}<_components.code>{"[object Object]"}</_components.code>{"와 같이 출력되는 것을 방지하기 위해 내부적으로 JSON.stringify를 사용해 처리하고 있습니다."}</_components.p>{"\n"}<_components.p>{"그러나, object 안에 로그에 "}<_components.strong>{"포함하고 싶지 않은 정보"}</_components.strong>{"가 있다면 이를 제거하고 출력하기 위해, 또는 "}<_components.strong>{"원하는 정보만 간추려서"}</_components.strong>{" 출력하기 위해 options의 "}<_components.code>{"includePath"}</_components.code>{"와 "}<_components.code>{"excludePath"}</_components.code>{"를 사용합니다."}</_components.p>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"Logged의 options 정의"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-keyword">{"type"}</_components.span>{" "}<_components.span className="hljs-title class_">{"Path"}</_components.span>{" = "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n"}<_components.span className="hljs-keyword">{"type"}</_components.span>{" "}<_components.span className="hljs-title class_">{"Paths"}</_components.span>{" = "}<_components.span className="hljs-title class_">{"Path"}</_components.span>{"[];\n\n"}<_components.span className="hljs-keyword">{"interface"}</_components.span>{" "}<_components.span className="hljs-title class_">{"IncludeExcludePath"}</_components.span>{" {\n    "}<_components.span className="hljs-attr">{"includePath"}</_components.span>{"?: "}<_components.span className="hljs-title class_">{"Paths"}</_components.span>{";\n    "}<_components.span className="hljs-attr">{"excludePath"}</_components.span>{"?: "}<_components.span className="hljs-title class_">{"Paths"}</_components.span>{";\n}\n\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"function"}</_components.span>{" "}<_components.span className="hljs-title function_">{"Logged"}</_components.span>{"("}<_components.span className="hljs-params"><_components.span className="hljs-attr">{"name"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{", "}<_components.span className="hljs-attr">{"options"}</_components.span>{"?: "}<_components.span className="hljs-title class_">{"IncludeExcludePath"}</_components.span></_components.span>{"): "}<_components.span className="hljs-title class_">{"ParameterDecoratorType"}</_components.span>{";\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"app.controller.ts"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"Get"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'@nestjs/common'"}</_components.span>{";\n"}<_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"AppService"}</_components.span>{", "}<_components.span className="hljs-title class_">{"UserData"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'./app.service'"}</_components.span>{";\n"}<_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"LoggedController"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'nestlogged'"}</_components.span>{";\n\n"}<_components.span className="hljs-meta">{"@LoggedController"}</_components.span>{"()\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"class"}</_components.span>{" "}<_components.span className="hljs-title class_">{"AppController"}</_components.span>{" {\n  "}<_components.span className="hljs-title function_">{"constructor"}</_components.span>{"("}<_components.span className="hljs-params"><_components.span className="hljs-keyword">{"private"}</_components.span>{" "}<_components.span className="hljs-keyword">{"readonly"}</_components.span>{" "}<_components.span className="hljs-attr">{"appService"}</_components.span>{": "}<_components.span className="hljs-title class_">{"AppService"}</_components.span></_components.span>{") {}\n\n  "}<_components.span className="hljs-meta">{"@Get"}</_components.span>{"()\n  "}<_components.span className="hljs-title function_">{"createNewUser"}</_components.span>{"(): "}<_components.span className="hljs-title class_">{"UserData"}</_components.span>{" {\n    "}<_components.span className="hljs-keyword">{"return"}</_components.span>{" "}<_components.span className="hljs-variable language_">{"this"}</_components.span>{"."}<_components.span className="hljs-property">{"appService"}</_components.span>{"."}<_components.span className="hljs-title function_">{"createNewUser"}</_components.span>{"({\n      "}<_components.span className="hljs-attr">{"displayName"}</_components.span>{": "}<_components.span className="hljs-string">{"'John Doe'"}</_components.span>{",\n      "}<_components.span className="hljs-attr">{"email"}</_components.span>{": "}<_components.span className="hljs-string">{"'john.doe@example.com'"}</_components.span>{",\n      "}<_components.span className="hljs-attr">{"auth"}</_components.span>{": {\n        "}<_components.span className="hljs-attr">{"loginName"}</_components.span>{": "}<_components.span className="hljs-string">{"'john.doe'"}</_components.span>{",\n        "}<_components.span className="hljs-attr">{"password"}</_components.span>{": "}<_components.span className="hljs-string">{"'password'"}</_components.span>{", "}<_components.span className="hljs-comment">{"/* 이걸 숨겨야만 합니다!!! */"}</_components.span>{"\n      },\n    });\n  }\n}\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"app.service.ts"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"Logged"}</_components.span>{", "}<_components.span className="hljs-title class_">{"LoggedInjectable"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'nestlogged'"}</_components.span>{";\n\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"interface"}</_components.span>{" "}<_components.span className="hljs-title class_">{"UserData"}</_components.span>{" {\n  "}<_components.span className="hljs-attr">{"displayName"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n  "}<_components.span className="hljs-attr">{"email"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n  "}<_components.span className="hljs-attr">{"auth"}</_components.span>{": {\n    "}<_components.span className="hljs-attr">{"loginName"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n    "}<_components.span className="hljs-attr">{"password"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n  };\n}\n\n"}<_components.span className="hljs-meta">{"@LoggedInjectable"}</_components.span>{"()\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"class"}</_components.span>{" "}<_components.span className="hljs-title class_">{"AppService"}</_components.span>{" {\n  "}<_components.span className="hljs-title function_">{"createNewUser"}</_components.span>{"("}<_components.span className="hljs-params">{"\n    "}<_components.span className="hljs-meta">{"@Logged"}</_components.span>{"("}<_components.span className="hljs-string">{"'user'"}</_components.span>{", { excludePath: ["}<_components.span className="hljs-string">{"'auth.password'"}</_components.span>{"] }) "}<_components.span className="hljs-comment">{"// 이렇게 숨길 수 있습니다!!"}</_components.span>{"\n    "}<_components.span className="hljs-attr">{"newUserData"}</_components.span>{": "}<_components.span className="hljs-title class_">{"UserData"}</_components.span>{",\n  "}</_components.span>{") {\n    "}<_components.span className="hljs-comment">{"// create new user"}</_components.span>{"\n    "}<_components.span className="hljs-keyword">{"return"}</_components.span>{" newUserData;\n  }\n}\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"콘솔 출력"}</_components.div><_components.div className="remark-code-meta__lang">{"Log"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-log" data-language="log">{"LOG [AppController] HIT ENDPOINT AppController.createNewUser (AppController::/[GET])\nLOG [AppService] HIT FUNCTION AppService.createNewUser WITH user={\"displayName\":\"John Doe\",\"email\":\"john.doe@example.com\",\"auth\":{\"loginName\":\"john.doe\"}}\nLOG [AppService] RETURNED FUNCTION AppService.createNewUser\nLOG [AppController] RETURNED ENDPOINT AppController.createNewUser (AppController::/[GET])\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.h3 id="each">{"Each"}</_components.h3>{"\n"}<_components.p><_components.code>{"@Logged()"}</_components.code>{" 데코레이터의 "}<_components.code>{"name"}</_components.code>{" 파라미터 위치에 "}<_components.code>{"object"}</_components.code>{"를 줄 경우 "}<_components.code>{"each"}</_components.code>{" 파라미터로 간주됩니다."}</_components.p>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"Logged의 Each 파라미터 오버로드"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"type"}</_components.span>{" "}<_components.span className="hljs-title class_">{"Path"}</_components.span>{" = "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"type"}</_components.span>{" "}<_components.span className="hljs-title class_">{"Each"}</_components.span>{" = "}<_components.span className="hljs-title class_">{"Record"}</_components.span>{"<"}<_components.span className="hljs-built_in">{"string"}</_components.span>{", "}<_components.span className="hljs-title class_">{"Path"}</_components.span>{">;\n\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"function"}</_components.span>{" "}<_components.span className="hljs-title function_">{"Logged"}</_components.span>{"("}<_components.span className="hljs-params"><_components.span className="hljs-attr">{"name"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{", "}<_components.span className="hljs-attr">{"options"}</_components.span>{"?: "}<_components.span className="hljs-title class_">{"IncludeExcludePath"}</_components.span></_components.span>{"): "}<_components.span className="hljs-title class_">{"ParameterDecoratorType"}</_components.span>{";\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"function"}</_components.span>{" "}<_components.span className="hljs-title function_">{"Logged"}</_components.span>{"("}<_components.span className="hljs-params"><_components.span className="hljs-attr">{"name"}</_components.span>{": "}<_components.span className="hljs-title class_">{"Each"}</_components.span></_components.span>{"): "}<_components.span className="hljs-title class_">{"ParameterDecoratorType"}</_components.span>{";\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.p>{"Each를 사용할 경우, "}<_components.strong>{"하나의 파라미터를 여러개로 분할해"}</_components.strong>{" 로그에 표시할 수 있습니다."}</_components.p>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"app.service.ts"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"Logged"}</_components.span>{", "}<_components.span className="hljs-title class_">{"LoggedInjectable"}</_components.span>{", "}<_components.span className="hljs-title class_">{"Returns"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'nestlogged'"}</_components.span>{";\n\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"interface"}</_components.span>{" "}<_components.span className="hljs-title class_">{"UserData"}</_components.span>{" {\n  "}<_components.span className="hljs-attr">{"displayName"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n  "}<_components.span className="hljs-attr">{"email"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n  "}<_components.span className="hljs-attr">{"auth"}</_components.span>{": {\n    "}<_components.span className="hljs-attr">{"loginName"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n    "}<_components.span className="hljs-attr">{"password"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n  };\n}\n\n"}<_components.span className="hljs-meta">{"@LoggedInjectable"}</_components.span>{"()\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"class"}</_components.span>{" "}<_components.span className="hljs-title class_">{"AppService"}</_components.span>{" {\n  "}<_components.span className="hljs-meta">{"@Returns"}</_components.span>{"()\n  "}<_components.span className="hljs-title function_">{"createNewUser"}</_components.span>{"("}<_components.span className="hljs-params">{"\n    "}<_components.span className="hljs-meta">{"@Logged"}</_components.span>{"({\n      displayName: "}<_components.span className="hljs-string">{"'displayName'"}</_components.span>{", // displayName 따로,\n      email: "}<_components.span className="hljs-string">{"'email'"}</_components.span>{", // email 따로,\n      loginName: "}<_components.span className="hljs-string">{"'auth.loginName'"}</_components.span>{", // loginName 따로 출력합니다.\n      // 하나의 "}<_components.span className="hljs-built_in">{"object"}</_components.span>{"로 출력하지 않아요.\n    })\n    "}<_components.span className="hljs-attr">{"newUserData"}</_components.span>{": "}<_components.span className="hljs-title class_">{"UserData"}</_components.span>{",\n  "}</_components.span>{") {\n    "}<_components.span className="hljs-comment">{"// create new user"}</_components.span>{"\n    "}<_components.span className="hljs-keyword">{"return"}</_components.span>{" newUserData;\n  }\n}\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"출력 로그"}</_components.div><_components.div className="remark-code-meta__lang">{"Log"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-log" data-language="log">{"LOG [AppController] HIT ENDPOINT AppController.createNewUser (AppController::/[GET])\nLOG [AppService] HIT FUNCTION AppService.createNewUser WITH displayName=John Doe, email=john.doe@example.com, loginName=john.doe\nLOG [AppService] RETURNED FUNCTION AppService.createNewUser WITH {\"displayName\":\"John Doe\",\"email\":\"john.doe@example.com\",\"auth\":{\"loginName\":\"john.doe\",\"password\":\"password\"}}\nLOG [AppController] RETURNED ENDPOINT AppController.createNewUser (AppController::/[GET])\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.hr />{"\n"}<_components.h1 id="종료-반환값-로그">{"종료 반환값 로그"}</_components.h1>{"\n"}<_components.p><_components.code>{"@Returns()"}</_components.code>{" 데코레이터를 사용하면 메서드의 반환값을 로그에 포함할 수 있습니다."}</_components.p>{"\n"}<_components.p><_components.code>{"@Returns()"}</_components.code>{"의 파라미터는 "}<_components.code>{"@Logged()"}</_components.code>{"의 파라미터와 거의 일치합니다. 따라서 "}<_components.code>{"@Logged()"}</_components.code>{"와 비슷한 방식으로 "}<_components.code>{"@Returns()"}</_components.code>{"를 사용할 수 있습니다."}</_components.p>{"\n"}<_components.p>{"다만 한 가지 다른 점은, "}<_components.code>{"@Returns()"}</_components.code>{"는 "}<_components.code>{"@Logged()"}</_components.code>{"와 다르게 "}<_components.code>{"name"}</_components.code>{"을 주지 않아도 무관합니다."}</_components.p>{"\n"}<_components.ul>{"\n"}<_components.li>{"아무런 파라미터 없이 사용할 경우 반환값을 전부 출력합니다."}</_components.li>{"\n"}</_components.ul>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"app.service.ts"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"Logged"}</_components.span>{", "}<_components.span className="hljs-title class_">{"LoggedInjectable"}</_components.span>{", "}<_components.span className="hljs-title class_">{"Returns"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'nestlogged'"}</_components.span>{";\n\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"interface"}</_components.span>{" "}<_components.span className="hljs-title class_">{"UserData"}</_components.span>{" {\n  "}<_components.span className="hljs-attr">{"displayName"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n  "}<_components.span className="hljs-attr">{"email"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n  "}<_components.span className="hljs-attr">{"auth"}</_components.span>{": {\n    "}<_components.span className="hljs-attr">{"loginName"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n    "}<_components.span className="hljs-attr">{"password"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n  };\n}\n\n"}<_components.span className="hljs-meta">{"@LoggedInjectable"}</_components.span>{"()\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"class"}</_components.span>{" "}<_components.span className="hljs-title class_">{"AppService"}</_components.span>{" {\n  "}<_components.span className="hljs-meta">{"@Returns"}</_components.span>{"() "}<_components.span className="hljs-comment">{"// 반환값을 로그하고자 합니다."}</_components.span>{"\n  "}<_components.span className="hljs-title function_">{"createNewUser"}</_components.span>{"("}<_components.span className="hljs-params">{"\n    "}<_components.span className="hljs-meta">{"@Logged"}</_components.span>{"({\n      displayName: "}<_components.span className="hljs-string">{"'displayName'"}</_components.span>{",\n      email: "}<_components.span className="hljs-string">{"'email'"}</_components.span>{",\n      loginName: "}<_components.span className="hljs-string">{"'auth.loginName'"}</_components.span>{",\n    })\n    "}<_components.span className="hljs-attr">{"newUserData"}</_components.span>{": "}<_components.span className="hljs-title class_">{"UserData"}</_components.span>{",\n  "}</_components.span>{") {\n    "}<_components.span className="hljs-comment">{"// create new user"}</_components.span>{"\n    "}<_components.span className="hljs-keyword">{"return"}</_components.span>{" newUserData;\n  }\n}\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"출력 로그"}</_components.div><_components.div className="remark-code-meta__lang">{"Log"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-log" data-language="log">{"LOG [AppController] HIT ENDPOINT AppController.createNewUser (AppController::/[GET])\nLOG [AppService] HIT FUNCTION AppService.createNewUser WITH displayName=John Doe, email=john.doe@example.com, loginName=john.doe\nLOG [AppService] RETURNED FUNCTION AppService.createNewUser WITH {\"displayName\":\"John Doe\",\"email\":\"john.doe@example.com\",\"auth\":{\"loginName\":\"john.doe\",\"password\":\"password\"}}\nLOG [AppController] RETURNED ENDPOINT AppController.createNewUser (AppController::/[GET])\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.ul>{"\n"}<_components.li><_components.code>{"@Logged()"}</_components.code>{"의 파라미터인 name과 options를 사용할 수도 있습니다."}</_components.li>{"\n"}</_components.ul>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"app.service.ts"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"Logged"}</_components.span>{", "}<_components.span className="hljs-title class_">{"LoggedInjectable"}</_components.span>{", "}<_components.span className="hljs-title class_">{"Returns"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'nestlogged'"}</_components.span>{";\n\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"interface"}</_components.span>{" "}<_components.span className="hljs-title class_">{"UserData"}</_components.span>{" {\n  "}<_components.span className="hljs-attr">{"displayName"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n  "}<_components.span className="hljs-attr">{"email"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n  "}<_components.span className="hljs-attr">{"auth"}</_components.span>{": {\n    "}<_components.span className="hljs-attr">{"loginName"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n    "}<_components.span className="hljs-attr">{"password"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n  };\n}\n\n"}<_components.span className="hljs-meta">{"@LoggedInjectable"}</_components.span>{"()\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"class"}</_components.span>{" "}<_components.span className="hljs-title class_">{"AppService"}</_components.span>{" {\n  "}<_components.span className="hljs-meta">{"@Returns"}</_components.span>{"("}<_components.span className="hljs-string">{"'createdUser'"}</_components.span>{", { "}<_components.span className="hljs-attr">{"excludePath"}</_components.span>{": ["}<_components.span className="hljs-string">{"'auth.password'"}</_components.span>{"] })\n  "}<_components.span className="hljs-title function_">{"createNewUser"}</_components.span>{"("}<_components.span className="hljs-params">{"\n    "}<_components.span className="hljs-meta">{"@Logged"}</_components.span>{"({\n      displayName: "}<_components.span className="hljs-string">{"'displayName'"}</_components.span>{",\n      email: "}<_components.span className="hljs-string">{"'email'"}</_components.span>{",\n      loginName: "}<_components.span className="hljs-string">{"'auth.loginName'"}</_components.span>{",\n    })\n    "}<_components.span className="hljs-attr">{"newUserData"}</_components.span>{": "}<_components.span className="hljs-title class_">{"UserData"}</_components.span>{",\n  "}</_components.span>{") {\n    "}<_components.span className="hljs-comment">{"// create new user"}</_components.span>{"\n    "}<_components.span className="hljs-keyword">{"return"}</_components.span>{" newUserData;\n  }\n}\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"출력 로그"}</_components.div><_components.div className="remark-code-meta__lang">{"Log"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-log" data-language="log">{"LOG [AppController] HIT ENDPOINT AppController.createNewUser (AppController::/[GET])\nLOG [AppService] HIT FUNCTION AppService.createNewUser WITH displayName=John Doe, email=john.doe@example.com, loginName=john.doe\nLOG [AppService] RETURNED FUNCTION AppService.createNewUser WITH createdUser={\"displayName\":\"John Doe\",\"email\":\"john.doe@example.com\",\"auth\":{\"loginName\":\"john.doe\"}}\nLOG [AppController] RETURNED ENDPOINT AppController.createNewUser (AppController::/[GET])\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.ul>{"\n"}<_components.li>{"또는, Each를 사용할 수도 있습니다."}</_components.li>{"\n"}</_components.ul>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"app.service.ts"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"Logged"}</_components.span>{", "}<_components.span className="hljs-title class_">{"LoggedInjectable"}</_components.span>{", "}<_components.span className="hljs-title class_">{"Returns"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'nestlogged'"}</_components.span>{";\n\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"interface"}</_components.span>{" "}<_components.span className="hljs-title class_">{"UserData"}</_components.span>{" {\n  "}<_components.span className="hljs-attr">{"displayName"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n  "}<_components.span className="hljs-attr">{"email"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n  "}<_components.span className="hljs-attr">{"auth"}</_components.span>{": {\n    "}<_components.span className="hljs-attr">{"loginName"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n    "}<_components.span className="hljs-attr">{"password"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n  };\n}\n\n"}<_components.span className="hljs-meta">{"@LoggedInjectable"}</_components.span>{"()\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"class"}</_components.span>{" "}<_components.span className="hljs-title class_">{"AppService"}</_components.span>{" {\n  "}<_components.span className="hljs-meta">{"@Returns"}</_components.span>{"({\n    "}<_components.span className="hljs-attr">{"displayName"}</_components.span>{": "}<_components.span className="hljs-string">{"'displayName'"}</_components.span>{",\n    "}<_components.span className="hljs-attr">{"email"}</_components.span>{": "}<_components.span className="hljs-string">{"'email'"}</_components.span>{",\n    "}<_components.span className="hljs-attr">{"loginName"}</_components.span>{": "}<_components.span className="hljs-string">{"'auth.loginName'"}</_components.span>{"\n  })\n  "}<_components.span className="hljs-title function_">{"createNewUser"}</_components.span>{"("}<_components.span className="hljs-params">{"\n    "}<_components.span className="hljs-meta">{"@Logged"}</_components.span>{"({\n      displayName: "}<_components.span className="hljs-string">{"'displayName'"}</_components.span>{",\n      email: "}<_components.span className="hljs-string">{"'email'"}</_components.span>{",\n      loginName: "}<_components.span className="hljs-string">{"'auth.loginName'"}</_components.span>{",\n    })\n    "}<_components.span className="hljs-attr">{"newUserData"}</_components.span>{": "}<_components.span className="hljs-title class_">{"UserData"}</_components.span>{",\n  "}</_components.span>{") {\n    "}<_components.span className="hljs-comment">{"// create new user"}</_components.span>{"\n    "}<_components.span className="hljs-keyword">{"return"}</_components.span>{" newUserData;\n  }\n}\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"출력 로그"}</_components.div><_components.div className="remark-code-meta__lang">{"Log"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-log" data-language="log">{"LOG [AppController] HIT ENDPOINT AppController.createNewUser (AppController::/[GET])\nLOG [AppService] HIT FUNCTION AppService.createNewUser WITH displayName=John Doe, email=john.doe@example.com, loginName=john.doe\nLOG [AppService] RETURNED FUNCTION AppService.createNewUser WITH displayName=John Doe, email=john.doe@example.com, loginName=john.doe\nLOG [AppController] RETURNED ENDPOINT AppController.createNewUser (AppController::/[GET])\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.hr />{"\n"}<_components.h1 id="기타-특수함수-로그">{"기타 특수함수 로그"}</_components.h1>{"\n"}<_components.p>{"지금까지는 Controller와 Service에 관해서만 다뤘습니다."}</_components.p>{"\n"}<_components.p>{"NestLogged는 이외의 ExceptionFilter, Guard, Interceptor, Middleware에 대해서도 로그 데코레이터를 지원합니다."}</_components.p>{"\n"}<_components.ul>{"\n"}<_components.li>{"ExceptionFilter = "}<_components.code>{"LoggedExceptionFilter"}</_components.code></_components.li>{"\n"}<_components.li>{"Guard = "}<_components.code>{"LoggedGuard"}</_components.code></_components.li>{"\n"}<_components.li>{"Interceptor = "}<_components.code>{"LoggedInterceptor"}</_components.code></_components.li>{"\n"}<_components.li>{"Middleware = "}<_components.code>{"LoggedMiddleware"}</_components.code></_components.li>{"\n"}</_components.ul>{"\n"}<_components.hr />{"\n"}<_components.h1 id="로그-주입과-범위-로깅">{"로그 주입과 범위 로깅"}</_components.h1>{"\n"}<_components.hr />{"\n"}<_components.h1 id="추가-pino-적용하기">{"추가: Pino 적용하기"}</_components.h1></>;
}
export default function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = props.components || ({});
  return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props} /></MDXLayout> : _createMdxContent(props);
}
