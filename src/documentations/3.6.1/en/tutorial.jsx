/*@jsxRuntime automatic*/
/*@jsxImportSource react*/
export const tableOfContents = [{
  "depth": 1,
  "value": "About NestLogged",
  "id": "about-nestlogged"
}, {
  "depth": 1,
  "value": "Applying NestLogged Logger",
  "id": "applying-nestlogged-logger"
}, {
  "depth": 1,
  "value": "Using with @nestjs/platform-fastify",
  "id": "using-with-nestjsplatform-fastify"
}, {
  "depth": 1,
  "value": "Adding Logs to Methods",
  "id": "adding-logs-to-methods",
  "children": [{
    "depth": 2,
    "value": "Decorator Options",
    "id": "decorator-options"
  }, {
    "depth": 2,
    "value": "Logging All Methods at Once",
    "id": "logging-all-methods-at-once"
  }]
}, {
  "depth": 1,
  "value": "Logging Call Parameters",
  "id": "logging-call-parameters",
  "children": [{
    "depth": 2,
    "value": "Decorator Parameters",
    "id": "decorator-parameters",
    "children": [{
      "depth": 3,
      "value": "name (required)",
      "id": "name-required"
    }, {
      "depth": 3,
      "value": "Options (optional)",
      "id": "options-optional"
    }, {
      "depth": 3,
      "value": "Each",
      "id": "each"
    }]
  }]
}, {
  "depth": 1,
  "value": "Logging Return Values",
  "id": "logging-return-values"
}, {
  "depth": 1,
  "value": "Logger Injection",
  "id": "logger-injection",
  "children": [{
    "depth": 2,
    "value": "InjectLogger",
    "id": "injectlogger"
  }, {
    "depth": 2,
    "value": "Accessing Scope",
    "id": "accessing-scope"
  }, {
    "depth": 2,
    "value": "Understanding Type Errors",
    "id": "understanding-type-errors"
  }]
}, {
  "depth": 1,
  "value": "Other Special Log Decorators",
  "id": "other-special-log-decorators",
  "children": [{
    "depth": 2,
    "value": "LoggedGuard",
    "id": "loggedguard"
  }, {
    "depth": 2,
    "value": "LoggedInterceptor",
    "id": "loggedinterceptor"
  }, {
    "depth": 2,
    "value": "LoggedExceptionFilter",
    "id": "loggedexceptionfilter"
  }, {
    "depth": 2,
    "value": "LoggedMiddleware",
    "id": "loggedmiddleware"
  }, {
    "depth": 2,
    "value": "Using InjectLogger",
    "id": "using-injectlogger"
  }]
}, {
  "depth": 1,
  "value": "Additional: JSON Output",
  "id": "additional-json-output"
}];
function _createMdxContent(props) {
  const _components = {
    a: "a",
    blockquote: "blockquote",
    br: "br",
    circle: "circle",
    code: "code",
    div: "div",
    g: "g",
    h1: "h1",
    h2: "h2",
    h3: "h3",
    header: "header",
    hr: "hr",
    li: "li",
    ol: "ol",
    p: "p",
    path: "path",
    pre: "pre",
    span: "span",
    strong: "strong",
    svg: "svg",
    ul: "ul",
    ...props.components
  };
  return <><_components.p>{"This document explains all the "}<_components.strong>{"features and usage"}</_components.strong>{" of NestLogged, assuming you know nothing about it."}</_components.p>{"\n"}<_components.p>{"Recommended for those who are new to NestLogged."}</_components.p>{"\n"}<_components.h1 id="about-nestlogged">{"About NestLogged"}</_components.h1>{"\n"}<_components.p>{"NestLogged provides simple decorators for NestJS, helping you implement complex logging patterns with ease."}</_components.p>{"\n"}<_components.p>{"NestLogged offers the following features:"}</_components.p>{"\n"}<_components.ul>{"\n"}<_components.li>{"Function call, return, and error logging ("}<_components.strong>{"This is the core and foundation of NestLogged!"}</_components.strong>{")"}</_components.li>{"\n"}<_components.li>{"Parameter logging when functions are called"}{"\n"}<_components.ul>{"\n"}<_components.li>{"Support for hiding or selecting specific properties when parameters are objects or arrays"}</_components.li>{"\n"}</_components.ul>{"\n"}</_components.li>{"\n"}<_components.li>{"Return value logging when functions complete"}</_components.li>{"\n"}<_components.li>{"Trace logs that follow the function call flow (We call this Scope)"}</_components.li>{"\n"}<_components.li>{"Unique ID display for each Request"}</_components.li>{"\n"}</_components.ul>{"\n"}<_components.p>{"Here's an example of the log output:"}</_components.p>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"Example Log"}</_components.div><_components.div className="remark-code-meta__lang">{"Log"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-log" data-language="log">{"LOG [AppMiddleware] ID=[nPcz74xbRvm2IB0rTR6B2g/0000000001] | AppMiddleware.AppMiddleware: HIT MIDDLEWARE AppMiddleware.AppMiddleware (/)\nLOG [AppMiddleware] ID=[nPcz74xbRvm2IB0rTR6B2g/0000000001] | AppMiddleware.AppMiddleware: Hello from Middleware!\nLOG [AppGuard] ID=[nPcz74xbRvm2IB0rTR6B2g/0000000001] | AppGuard.AppGuard: HIT GUARD AppGuard.AppGuard (/)\nLOG [AppGuard] ID=[nPcz74xbRvm2IB0rTR6B2g/0000000001] | AppGuard.AppGuard: Hello from Guard!\nLOG [AppGuard] ID=[nPcz74xbRvm2IB0rTR6B2g/0000000001] | AppGuard.AppGuard: RETURNED GUARD AppGuard.AppGuard (/)\nLOG [AppMiddleware] ID=[nPcz74xbRvm2IB0rTR6B2g/0000000001] | AppMiddleware.AppMiddleware: RETURNED MIDDLEWARE AppMiddleware.AppMiddleware (/)\nLOG [AppController] ID=[nPcz74xbRvm2IB0rTR6B2g/0000000001] | AppController.getHello: HIT ENDPOINT AppController.getHello (AppController::/[GET])\nLOG [AppService] ID=[nPcz74xbRvm2IB0rTR6B2g/0000000001] | AppController.getHello -> AppService.getHello: HIT FUNCTION AppService.getHello WITH value=i\nLOG [AppService] ID=[nPcz74xbRvm2IB0rTR6B2g/0000000001] | AppController.getHello -> AppService.getHello: Hello from AppService!\nLOG [AppService] ID=[nPcz74xbRvm2IB0rTR6B2g/0000000001] | AppController.getHello -> AppService.getHello: RETURNED FUNCTION AppService.getHello\nLOG [AppController] ID=[nPcz74xbRvm2IB0rTR6B2g/0000000001] | AppController.getHello: RETURNED ENDPOINT AppController.getHello (AppController::/[GET]) WITH i\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.p>{"The interesting part is that these logs can be created with just a few simple decorators.\nLet's learn how to do this step by step."}</_components.p>{"\n"}<_components.hr />{"\n"}<_components.h1 id="applying-nestlogged-logger">{"Applying NestLogged Logger"}</_components.h1>{"\n"}<_components.p>{"NestLogged provides a ConsoleLogger that extends NestJS's default ConsoleLogger."}</_components.p>{"\n"}<_components.p>{"This new ConsoleLogger includes NestLogged's core features, and without it, some features may not output properly.\nTherefore, it is "}<_components.strong>{"recommended"}</_components.strong>{" to use this ConsoleLogger."}</_components.p>{"\n"}<_components.p>{"If you don't use the ConsoleLogger and instead use NestJS's default, you won't get errors, but the output might be strange or unexpected."}</_components.p>{"\n"}<_components.p>{"For more details, see the "}<_components.a href="deep-dive#meaning-of-consolelogger">{"Meaning of ConsoleLogger"}</_components.a>{" chapter."}</_components.p>{"\n"}<_components.p>{"Here's how to apply NestLogged's ConsoleLogger:"}</_components.p>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"main.ts"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"NestFactory"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'@nestjs/core'"}</_components.span>{";\n"}<_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"AppModule"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'./app.module'"}</_components.span>{";\n"}<_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"ConsoleLogger"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'nestlogged'"}</_components.span>{"; "}<_components.span className="hljs-comment">{"// Import NestLogged's ConsoleLogger"}</_components.span>{"\n\n"}<_components.span className="hljs-keyword">{"async"}</_components.span>{" "}<_components.span className="hljs-keyword">{"function"}</_components.span>{" "}<_components.span className="hljs-title function_">{"bootstrap"}</_components.span>{"("}<_components.span className="hljs-params" />{") {\n  "}<_components.span className="hljs-keyword">{"const"}</_components.span>{" app = "}<_components.span className="hljs-keyword">{"await"}</_components.span>{" "}<_components.span className="hljs-title class_">{"NestFactory"}</_components.span>{"."}<_components.span className="hljs-title function_">{"create"}</_components.span>{"("}<_components.span className="hljs-title class_">{"AppModule"}</_components.span>{", {\n    "}<_components.span className="hljs-attr">{"logger"}</_components.span>{": "}<_components.span className="hljs-keyword">{"new"}</_components.span>{" "}<_components.span className="hljs-title class_">{"ConsoleLogger"}</_components.span>{"(), "}<_components.span className="hljs-comment">{"// Apply ConsoleLogger to NestJS"}</_components.span>{"\n  });\n  "}<_components.span className="hljs-keyword">{"await"}</_components.span>{" app."}<_components.span className="hljs-title function_">{"listen"}</_components.span>{"(process."}<_components.span className="hljs-property">{"env"}</_components.span>{"."}<_components.span className="hljs-property">{"PORT"}</_components.span>{" ?? "}<_components.span className="hljs-number">{"3000"}</_components.span>{");\n}\n"}<_components.span className="hljs-title function_">{"bootstrap"}</_components.span>{"();\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.p>{"Later in this document, we'll also explain how to use third-party logging packages like pino with the NestLogged package."}</_components.p>{"\n"}<_components.blockquote className="remark-callout remark-callout__info">{"\n"}<_components.header className="remark-callout-header"><_components.svg xmlns="http://www.w3.org/2000/svg" className="lucide-info" width="32" height="32" viewBox="0 0 24 24"><_components.g fill="none" stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2"><_components.circle cx="12" cy="12" r="10" /><_components.path d="M12 16v-4m0-4h.01" /></_components.g></_components.svg>{"Info"}</_components.header>{"\n"}<_components.p>{"To learn more about how to extend loggers in NestJS, check the following link:"}<_components.br />{"\n"}<_components.a href="https://docs.nestjs.com/techniques/logger#extend-built-in-logger">{"Documentation | NestJS - A progressive Node.js framework"}</_components.a></_components.p>{"\n"}</_components.blockquote>{"\n"}<_components.hr />{"\n"}<_components.h1 id="using-with-nestjsplatform-fastify">{"Using with @nestjs/platform-fastify"}</_components.h1>{"\n"}<_components.p>{"For the same reasons mentioned above, when using fastify with NestJS, some features of NestLogged might cause errors."}</_components.p>{"\n"}<_components.p>{"Therefore, to avoid errors, you "}<_components.strong>{"must"}</_components.strong>{" use the "}<_components.code>{"nestlogged-fastify"}</_components.code>{" package."}</_components.p>{"\n"}<_components.p><_components.code>{"nestlogged"}</_components.code>{" and "}<_components.code>{"nestlogged-fastify"}</_components.code>{" are not very different, and simply changing the package name when importing is sufficient."}</_components.p>{"\n"}<_components.p>{"The internal logic is different, but the types match perfectly."}</_components.p>{"\n"}<_components.hr />{"\n"}<_components.h1 id="adding-logs-to-methods">{"Adding Logs to Methods"}</_components.h1>{"\n"}<_components.p>{"The foundation of NestLogged is adding call/return/error logs to methods."}</_components.p>{"\n"}<_components.p>{"The basic decorators for this role are "}<_components.code>{"@LoggedFunction()"}</_components.code>{" and "}<_components.code>{"@LoggedRoute()"}</_components.code>{"."}</_components.p>{"\n"}<_components.ul>{"\n"}<_components.li><_components.code>{"@LoggedFunction()"}</_components.code>{" - Used for general methods such as those in Services."}</_components.li>{"\n"}<_components.li><_components.code>{"@LoggedRoute()"}</_components.code>{" - Used for Controller methods. In addition to "}<_components.code>{"@LoggedFunction()"}</_components.code>{", it also collects the path and method of the endpoint."}</_components.li>{"\n"}</_components.ul>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"app.controller.ts"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"Controller"}</_components.span>{", "}<_components.span className="hljs-title class_">{"Get"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'@nestjs/common'"}</_components.span>{";\n"}<_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"AppService"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'./app.service'"}</_components.span>{";\n"}<_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"LoggedRoute"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'nestlogged'"}</_components.span>{";\n\n"}<_components.span className="hljs-meta">{"@Controller"}</_components.span>{"()\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"class"}</_components.span>{" "}<_components.span className="hljs-title class_">{"AppController"}</_components.span>{" {\n  "}<_components.span className="hljs-title function_">{"constructor"}</_components.span>{"("}<_components.span className="hljs-params"><_components.span className="hljs-keyword">{"private"}</_components.span>{" "}<_components.span className="hljs-keyword">{"readonly"}</_components.span>{" "}<_components.span className="hljs-attr">{"appService"}</_components.span>{": "}<_components.span className="hljs-title class_">{"AppService"}</_components.span></_components.span>{") {}\n\n  "}<_components.span className="hljs-meta">{"@LoggedRoute"}</_components.span>{"() "}<_components.span className="hljs-comment">{"// The call and return of this endpoint will be logged."}</_components.span>{"\n  "}<_components.span className="hljs-meta">{"@Get"}</_components.span>{"()\n  "}<_components.span className="hljs-title function_">{"getHello"}</_components.span>{"(): "}<_components.span className="hljs-built_in">{"string"}</_components.span>{" {\n    "}<_components.span className="hljs-keyword">{"return"}</_components.span>{" "}<_components.span className="hljs-variable language_">{"this"}</_components.span>{"."}<_components.span className="hljs-property">{"appService"}</_components.span>{"."}<_components.span className="hljs-title function_">{"getHello"}</_components.span>{"();\n  }\n}\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"app.service.ts"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"Injectable"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'@nestjs/common'"}</_components.span>{";\n"}<_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"LoggedFunction"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'nestlogged'"}</_components.span>{";\n\n"}<_components.span className="hljs-meta">{"@Injectable"}</_components.span>{"()\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"class"}</_components.span>{" "}<_components.span className="hljs-title class_">{"AppService"}</_components.span>{" {\n  "}<_components.span className="hljs-meta">{"@LoggedFunction"}</_components.span>{"() "}<_components.span className="hljs-comment">{"// The call and return of this function will be logged."}</_components.span>{"\n  "}<_components.span className="hljs-title function_">{"getHello"}</_components.span>{"(): "}<_components.span className="hljs-built_in">{"string"}</_components.span>{" {\n    "}<_components.span className="hljs-keyword">{"return"}</_components.span>{" "}<_components.span className="hljs-string">{"'Hello!'"}</_components.span>{";\n  }\n}\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"Log Output"}</_components.div><_components.div className="remark-code-meta__lang">{"Log"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-log" data-language="log">{"LOG [AppController] HIT ENDPOINT AppController.getHello (AppController::/[GET])\nLOG [AppService] HIT FUNCTION AppService.getHello\nLOG [AppService] RETURNED FUNCTION AppService.getHello\nLOG [AppController] RETURNED ENDPOINT AppController.getHello (AppController::/[GET])\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.blockquote className="remark-callout remark-callout__warning">{"\n"}<_components.header className="remark-callout-header"><_components.svg xmlns="http://www.w3.org/2000/svg" className="lucide-warning" width="32" height="32" viewBox="0 0 24 24"><_components.path fill="none" stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="m21.73 18l-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3M12 9v4m0 4h.01" /></_components.svg>{"Warning"}</_components.header>{"\n"}<_components.p>{"When using "}<_components.code>{"@LoggedRoute()"}</_components.code>{", pay attention to the order of decorators."}<_components.br />{"\n"}{"Always place "}<_components.code>{"@LoggedRoute()"}</_components.code>{" "}<_components.strong>{"before"}</_components.strong>{" decorators like "}<_components.code>{"@Get()"}</_components.code>{", "}<_components.code>{"@Post()"}</_components.code>{", etc."}</_components.p>{"\n"}<_components.p>{"HTTP method decorators like "}<_components.code>{"@Get()"}</_components.code>{" and "}<_components.code>{"@Post()"}</_components.code>{" add path and method metadata to the applied method. "}<_components.code>{"@LoggedRoute()"}</_components.code>{" reads this metadata, and if executed before the HTTP method decorators, it will find no metadata and display undefined."}</_components.p>{"\n"}<_components.p>{"If you're confused about the order, remember that decorators work like "}<_components.code>{"LoggedRoute(Get(getHello))"}</_components.code>{"."}</_components.p>{"\n"}</_components.blockquote>{"\n"}<_components.h2 id="decorator-options">{"Decorator Options"}</_components.h2>{"\n"}<_components.p>{"You can provide options to configure "}<_components.code>{"@LoggedRoute()"}</_components.code>{" and "}<_components.code>{"@LoggedFunction()"}</_components.code>{"."}</_components.p>{"\n"}<_components.p>{"Both decorators accept the same type of options, and the option's structure and default values are as follows:"}</_components.p>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"Option Type Definition (src/logged/utils.ts)"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"interface"}</_components.span>{" "}<_components.span className="hljs-title class_">{"OverrideBuildOptions"}</_components.span>{" {\n  "}<_components.span className="hljs-attr">{"callLogLevel"}</_components.span>{": "}<_components.span className="hljs-title class_">{"LogLevel"}</_components.span>{" | "}<_components.span className="hljs-string">{"'skip'"}</_components.span>{";\n  "}<_components.span className="hljs-attr">{"returnLogLevel"}</_components.span>{": "}<_components.span className="hljs-title class_">{"LogLevel"}</_components.span>{" | "}<_components.span className="hljs-string">{"'skip'"}</_components.span>{";\n  "}<_components.span className="hljs-attr">{"errorLogLevel"}</_components.span>{": "}<_components.span className="hljs-title class_">{"LogLevel"}</_components.span>{" | "}<_components.span className="hljs-string">{"'skip'"}</_components.span>{";\n}\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"Option Default Values (src/logged/utils.ts)"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"const"}</_components.span>{" "}<_components.span className="hljs-attr">{"defaultOverrideBuildOptions"}</_components.span>{": "}<_components.span className="hljs-title class_">{"OverrideBuildOptions"}</_components.span>{" = {\n  "}<_components.span className="hljs-attr">{"callLogLevel"}</_components.span>{": "}<_components.span className="hljs-string">{"'log'"}</_components.span>{",\n  "}<_components.span className="hljs-attr">{"returnLogLevel"}</_components.span>{": "}<_components.span className="hljs-string">{"'log'"}</_components.span>{",\n  "}<_components.span className="hljs-attr">{"errorLogLevel"}</_components.span>{": "}<_components.span className="hljs-string">{"'error'"}</_components.span>{",\n};\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.h2 id="logging-all-methods-at-once">{"Logging All Methods at Once"}</_components.h2>{"\n"}<_components.p>{"It can be cumbersome to add decorators to each method in a class, so NestLogged provides class decorators that apply "}<_components.code>{"@LoggedRoute()"}</_components.code>{" or "}<_components.code>{"@LoggedFunction()"}</_components.code>{" to all methods in a class when applied to the class."}</_components.p>{"\n"}<_components.ul>{"\n"}<_components.li><_components.code>{"@LoggedController()"}</_components.code>{" - Applies NestJS's "}<_components.code>{"@Controller()"}</_components.code>{" decorator to the class and applies the "}<_components.code>{"@LoggedRoute()"}</_components.code>{" decorator to all methods in the class."}</_components.li>{"\n"}<_components.li><_components.code>{"@LoggedInjectable()"}</_components.code>{" - Applies NestJS's "}<_components.code>{"@Injectable()"}</_components.code>{" decorator to the class and applies the "}<_components.code>{"@LoggedFunction()"}</_components.code>{" decorator to all methods in the class."}</_components.li>{"\n"}</_components.ul>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"app.controller.ts"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"Get"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'@nestjs/common'"}</_components.span>{";\n"}<_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"AppService"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'./app.service'"}</_components.span>{";\n"}<_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"LoggedController"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'nestlogged'"}</_components.span>{";\n\n"}<_components.span className="hljs-comment">{"// Apply @LoggedRoute() to all methods in this controller."}</_components.span>{"\n"}<_components.span className="hljs-meta">{"@LoggedController"}</_components.span>{"() "}<_components.span className="hljs-comment">{"// Also replaces NestJS's @Controller"}</_components.span>{"\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"class"}</_components.span>{" "}<_components.span className="hljs-title class_">{"AppController"}</_components.span>{" {\n  "}<_components.span className="hljs-title function_">{"constructor"}</_components.span>{"("}<_components.span className="hljs-params"><_components.span className="hljs-keyword">{"private"}</_components.span>{" "}<_components.span className="hljs-keyword">{"readonly"}</_components.span>{" "}<_components.span className="hljs-attr">{"appService"}</_components.span>{": "}<_components.span className="hljs-title class_">{"AppService"}</_components.span></_components.span>{") {}\n\n  "}<_components.span className="hljs-meta">{"@Get"}</_components.span>{"()\n  "}<_components.span className="hljs-title function_">{"getHello"}</_components.span>{"(): "}<_components.span className="hljs-built_in">{"string"}</_components.span>{" {\n    "}<_components.span className="hljs-keyword">{"return"}</_components.span>{" "}<_components.span className="hljs-variable language_">{"this"}</_components.span>{"."}<_components.span className="hljs-property">{"appService"}</_components.span>{"."}<_components.span className="hljs-title function_">{"getHello"}</_components.span>{"();\n  }\n}\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"app.service.ts"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"LoggedInjectable"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'nestlogged'"}</_components.span>{";\n\n"}<_components.span className="hljs-comment">{"// Apply @LoggedFunction() to all methods in this service."}</_components.span>{"\n"}<_components.span className="hljs-meta">{"@LoggedInjectable"}</_components.span>{"() "}<_components.span className="hljs-comment">{"// Also replaces NestJS's @Injectable()"}</_components.span>{"\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"class"}</_components.span>{" "}<_components.span className="hljs-title class_">{"AppService"}</_components.span>{" {\n  "}<_components.span className="hljs-title function_">{"getHello"}</_components.span>{"(): "}<_components.span className="hljs-built_in">{"string"}</_components.span>{" {\n    "}<_components.span className="hljs-keyword">{"return"}</_components.span>{" "}<_components.span className="hljs-string">{"'Hello!'"}</_components.span>{";\n  }\n}\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.p>{"Using class decorators that apply logging to all methods reduces unnecessary code repetition and eliminates the need to worry about the position of the "}<_components.code>{"@LoggedRoute()"}</_components.code>{" decorator."}</_components.p>{"\n"}<_components.hr />{"\n"}<_components.h1 id="logging-call-parameters">{"Logging Call Parameters"}</_components.h1>{"\n"}<_components.p>{"To include parameters in the log when a function is called, you need to use the "}<_components.code>{"@Logged()"}</_components.code>{" decorator."}</_components.p>{"\n"}<_components.p>{"You can apply "}<_components.code>{"@Logged()"}</_components.code>{" before the parameter you want to include in the log."}</_components.p>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"app.service.ts"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-meta">{"@LoggedInjectable"}</_components.span>{"()\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"class"}</_components.span>{" "}<_components.span className="hljs-title class_">{"AppService"}</_components.span>{" {\n  "}<_components.span className="hljs-comment">{"/* The message parameter will be logged. */"}</_components.span>{"\n  "}<_components.span className="hljs-title function_">{"getMessage"}</_components.span>{"("}<_components.span className="hljs-meta">{"@Logged"}</_components.span>{"("}<_components.span className="hljs-string">{"'message'"}</_components.span>{") "}<_components.span className="hljs-attr">{"message"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{"): "}<_components.span className="hljs-built_in">{"string"}</_components.span>{" {\n    "}<_components.span className="hljs-keyword">{"return"}</_components.span>{" message;\n  }\n}\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"Log Output"}</_components.div><_components.div className="remark-code-meta__lang">{"Log"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-log" data-language="log">{"LOG [AppController] HIT ENDPOINT AppController.getHello (AppController::/[GET])\nLOG [AppService] HIT FUNCTION AppService.getMessage WITH message=Hello!\nLOG [AppService] RETURNED FUNCTION AppService.getMessage\nLOG [AppController] RETURNED ENDPOINT AppController.getHello (AppController::/[GET])\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.p>{"The first parameter of the decorator determines the name of the parameter to be recorded."}</_components.p>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"app.service.ts"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-meta">{"@LoggedInjectable"}</_components.span>{"()\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"class"}</_components.span>{" "}<_components.span className="hljs-title class_">{"AppService"}</_components.span>{" {\n  "}<_components.span className="hljs-comment">{"/* The parameter name is message, but we can record it as otherName. */"}</_components.span>{"\n  "}<_components.span className="hljs-title function_">{"getMessage"}</_components.span>{"("}<_components.span className="hljs-meta">{"@Logged"}</_components.span>{"("}<_components.span className="hljs-string">{"'otherName'"}</_components.span>{") "}<_components.span className="hljs-attr">{"message"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{"): "}<_components.span className="hljs-built_in">{"string"}</_components.span>{" {\n    "}<_components.span className="hljs-keyword">{"return"}</_components.span>{" message;\n  }\n}\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"Log Output"}</_components.div><_components.div className="remark-code-meta__lang">{"Log"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-log" data-language="log">{"LOG [AppController] HIT ENDPOINT AppController.getHello (AppController::/[GET])\nLOG [AppService] HIT FUNCTION AppService.getMessage WITH otherName=Hello!\nLOG [AppService] RETURNED FUNCTION AppService.getMessage\nLOG [AppController] RETURNED ENDPOINT AppController.getHello (AppController::/[GET])\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.h2 id="decorator-parameters">{"Decorator Parameters"}</_components.h2>{"\n"}<_components.h3 id="name-required">{"name (required)"}</_components.h3>{"\n"}<_components.p>{"In TypeScript, when applying a decorator to a parameter, TypeScript passes parameter information to the decorator.\nHowever, the parameter name is "}<_components.strong>{"not included"}</_components.strong>{" in this information."}</_components.p>{"\n"}<_components.p>{"Therefore, the decorator "}<_components.strong>{"cannot know"}</_components.strong>{" the name of the parameter it is applied to, which is why the user must provide the name directly."}</_components.p>{"\n"}<_components.h3 id="options-optional">{"Options (optional)"}</_components.h3>{"\n"}<_components.p>{"When the value of a parameter with the "}<_components.code>{"@Logged()"}</_components.code>{" decorator is an object, it is processed internally using JSON.stringify to prevent it from being output as "}<_components.code>{"[object Object]"}</_components.code>{" in the log."}</_components.p>{"\n"}<_components.p>{"However, if there is information in the object that you "}<_components.strong>{"don't want to include"}</_components.strong>{" in the log, or if you want to "}<_components.strong>{"extract only the desired information"}</_components.strong>{", you can use the "}<_components.code>{"includePath"}</_components.code>{" and "}<_components.code>{"excludePath"}</_components.code>{" options."}</_components.p>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"\"Logged's"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-keyword">{"type"}</_components.span>{" "}<_components.span className="hljs-title class_">{"Path"}</_components.span>{" = "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n"}<_components.span className="hljs-keyword">{"type"}</_components.span>{" "}<_components.span className="hljs-title class_">{"Paths"}</_components.span>{" = "}<_components.span className="hljs-title class_">{"Path"}</_components.span>{"[];\n\n"}<_components.span className="hljs-keyword">{"interface"}</_components.span>{" "}<_components.span className="hljs-title class_">{"IncludeExcludePath"}</_components.span>{" {\n    "}<_components.span className="hljs-attr">{"includePath"}</_components.span>{"?: "}<_components.span className="hljs-title class_">{"Paths"}</_components.span>{";\n    "}<_components.span className="hljs-attr">{"excludePath"}</_components.span>{"?: "}<_components.span className="hljs-title class_">{"Paths"}</_components.span>{";\n}\n\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"function"}</_components.span>{" "}<_components.span className="hljs-title function_">{"Logged"}</_components.span>{"("}<_components.span className="hljs-params"><_components.span className="hljs-attr">{"name"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{", "}<_components.span className="hljs-attr">{"options"}</_components.span>{"?: "}<_components.span className="hljs-title class_">{"IncludeExcludePath"}</_components.span></_components.span>{"): "}<_components.span className="hljs-title class_">{"ParameterDecoratorType"}</_components.span>{";\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"app.controller.ts"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"Get"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'@nestjs/common'"}</_components.span>{";\n"}<_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"AppService"}</_components.span>{", "}<_components.span className="hljs-title class_">{"UserData"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'./app.service'"}</_components.span>{";\n"}<_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"LoggedController"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'nestlogged'"}</_components.span>{";\n\n"}<_components.span className="hljs-meta">{"@LoggedController"}</_components.span>{"()\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"class"}</_components.span>{" "}<_components.span className="hljs-title class_">{"AppController"}</_components.span>{" {\n  "}<_components.span className="hljs-title function_">{"constructor"}</_components.span>{"("}<_components.span className="hljs-params"><_components.span className="hljs-keyword">{"private"}</_components.span>{" "}<_components.span className="hljs-keyword">{"readonly"}</_components.span>{" "}<_components.span className="hljs-attr">{"appService"}</_components.span>{": "}<_components.span className="hljs-title class_">{"AppService"}</_components.span></_components.span>{") {}\n\n  "}<_components.span className="hljs-meta">{"@Get"}</_components.span>{"()\n  "}<_components.span className="hljs-title function_">{"createNewUser"}</_components.span>{"(): "}<_components.span className="hljs-title class_">{"UserData"}</_components.span>{" {\n    "}<_components.span className="hljs-keyword">{"return"}</_components.span>{" "}<_components.span className="hljs-variable language_">{"this"}</_components.span>{"."}<_components.span className="hljs-property">{"appService"}</_components.span>{"."}<_components.span className="hljs-title function_">{"createNewUser"}</_components.span>{"({\n      "}<_components.span className="hljs-attr">{"displayName"}</_components.span>{": "}<_components.span className="hljs-string">{"'John Doe'"}</_components.span>{",\n      "}<_components.span className="hljs-attr">{"email"}</_components.span>{": "}<_components.span className="hljs-string">{"'john.doe@example.com'"}</_components.span>{",\n      "}<_components.span className="hljs-attr">{"auth"}</_components.span>{": {\n        "}<_components.span className="hljs-attr">{"loginName"}</_components.span>{": "}<_components.span className="hljs-string">{"'john.doe'"}</_components.span>{",\n        "}<_components.span className="hljs-attr">{"password"}</_components.span>{": "}<_components.span className="hljs-string">{"'password'"}</_components.span>{", "}<_components.span className="hljs-comment">{"/* This must be hidden!!! */"}</_components.span>{"\n      },\n    });\n  }\n}\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"app.service.ts"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"Logged"}</_components.span>{", "}<_components.span className="hljs-title class_">{"LoggedInjectable"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'nestlogged'"}</_components.span>{";\n\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"interface"}</_components.span>{" "}<_components.span className="hljs-title class_">{"UserData"}</_components.span>{" {\n  "}<_components.span className="hljs-attr">{"displayName"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n  "}<_components.span className="hljs-attr">{"email"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n  "}<_components.span className="hljs-attr">{"auth"}</_components.span>{": {\n    "}<_components.span className="hljs-attr">{"loginName"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n    "}<_components.span className="hljs-attr">{"password"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n  };\n}\n\n"}<_components.span className="hljs-meta">{"@LoggedInjectable"}</_components.span>{"()\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"class"}</_components.span>{" "}<_components.span className="hljs-title class_">{"AppService"}</_components.span>{" {\n  "}<_components.span className="hljs-title function_">{"createNewUser"}</_components.span>{"("}<_components.span className="hljs-params">{"\n    "}<_components.span className="hljs-meta">{"@Logged"}</_components.span>{"("}<_components.span className="hljs-string">{"'user'"}</_components.span>{", { excludePath: ["}<_components.span className="hljs-string">{"'auth.password'"}</_components.span>{"] }) "}<_components.span className="hljs-comment">{"// This is how we can hide it!!"}</_components.span>{"\n    "}<_components.span className="hljs-attr">{"newUserData"}</_components.span>{": "}<_components.span className="hljs-title class_">{"UserData"}</_components.span>{",\n  "}</_components.span>{") {\n    "}<_components.span className="hljs-comment">{"// create new user"}</_components.span>{"\n    "}<_components.span className="hljs-keyword">{"return"}</_components.span>{" newUserData;\n  }\n}\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"Console Output"}</_components.div><_components.div className="remark-code-meta__lang">{"Log"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-log" data-language="log">{"LOG [AppController] HIT ENDPOINT AppController.createNewUser (AppController::/[GET])\nLOG [AppService] HIT FUNCTION AppService.createNewUser WITH user={\"displayName\":\"John Doe\",\"email\":\"john.doe@example.com\",\"auth\":{\"loginName\":\"john.doe\"}}\nLOG [AppService] RETURNED FUNCTION AppService.createNewUser\nLOG [AppController] RETURNED ENDPOINT AppController.createNewUser (AppController::/[GET])\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.h3 id="each">{"Each"}</_components.h3>{"\n"}<_components.p>{"When an "}<_components.code>{"object"}</_components.code>{" is given to the "}<_components.code>{"name"}</_components.code>{" parameter of the "}<_components.code>{"@Logged()"}</_components.code>{" decorator, it is treated as the "}<_components.code>{"each"}</_components.code>{" parameter."}</_components.p>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"\"Logged's"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"type"}</_components.span>{" "}<_components.span className="hljs-title class_">{"Path"}</_components.span>{" = "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"type"}</_components.span>{" "}<_components.span className="hljs-title class_">{"Each"}</_components.span>{" = "}<_components.span className="hljs-title class_">{"Record"}</_components.span>{"<"}<_components.span className="hljs-built_in">{"string"}</_components.span>{", "}<_components.span className="hljs-title class_">{"Path"}</_components.span>{">;\n\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"function"}</_components.span>{" "}<_components.span className="hljs-title function_">{"Logged"}</_components.span>{"("}<_components.span className="hljs-params"><_components.span className="hljs-attr">{"name"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{", "}<_components.span className="hljs-attr">{"options"}</_components.span>{"?: "}<_components.span className="hljs-title class_">{"IncludeExcludePath"}</_components.span></_components.span>{"): "}<_components.span className="hljs-title class_">{"ParameterDecoratorType"}</_components.span>{";\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"function"}</_components.span>{" "}<_components.span className="hljs-title function_">{"Logged"}</_components.span>{"("}<_components.span className="hljs-params"><_components.span className="hljs-attr">{"name"}</_components.span>{": "}<_components.span className="hljs-title class_">{"Each"}</_components.span></_components.span>{"): "}<_components.span className="hljs-title class_">{"ParameterDecoratorType"}</_components.span>{";\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.p>{"When using Each, you can "}<_components.strong>{"split a single parameter into multiple parts"}</_components.strong>{" in the log."}</_components.p>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"app.service.ts"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"Logged"}</_components.span>{", "}<_components.span className="hljs-title class_">{"LoggedInjectable"}</_components.span>{", "}<_components.span className="hljs-title class_">{"Returns"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'nestlogged'"}</_components.span>{";\n\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"interface"}</_components.span>{" "}<_components.span className="hljs-title class_">{"UserData"}</_components.span>{" {\n  "}<_components.span className="hljs-attr">{"displayName"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n  "}<_components.span className="hljs-attr">{"email"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n  "}<_components.span className="hljs-attr">{"auth"}</_components.span>{": {\n    "}<_components.span className="hljs-attr">{"loginName"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n    "}<_components.span className="hljs-attr">{"password"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n  };\n}\n\n"}<_components.span className="hljs-meta">{"@LoggedInjectable"}</_components.span>{"()\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"class"}</_components.span>{" "}<_components.span className="hljs-title class_">{"AppService"}</_components.span>{" {\n  "}<_components.span className="hljs-meta">{"@Returns"}</_components.span>{"()\n  "}<_components.span className="hljs-title function_">{"createNewUser"}</_components.span>{"("}<_components.span className="hljs-params">{"\n    "}<_components.span className="hljs-meta">{"@Logged"}</_components.span>{"({\n      displayName: "}<_components.span className="hljs-string">{"'displayName'"}</_components.span>{", // displayName separately,\n      email: "}<_components.span className="hljs-string">{"'email'"}</_components.span>{", // email separately,\n      loginName: "}<_components.span className="hljs-string">{"'auth.loginName'"}</_components.span>{", // loginName separately.\n      // Not "}<_components.span className="hljs-keyword">{"as"}</_components.span>{" a single "}<_components.span className="hljs-built_in">{"object"}</_components.span>{".\n    })\n    "}<_components.span className="hljs-attr">{"newUserData"}</_components.span>{": "}<_components.span className="hljs-title class_">{"UserData"}</_components.span>{",\n  "}</_components.span>{") {\n    "}<_components.span className="hljs-comment">{"// create new user"}</_components.span>{"\n    "}<_components.span className="hljs-keyword">{"return"}</_components.span>{" newUserData;\n  }\n}\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"Log Output"}</_components.div><_components.div className="remark-code-meta__lang">{"Log"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-log" data-language="log">{"LOG [AppController] HIT ENDPOINT AppController.createNewUser (AppController::/[GET])\nLOG [AppService] HIT FUNCTION AppService.createNewUser WITH displayName=John Doe, email=john.doe@example.com, loginName=john.doe\nLOG [AppService] RETURNED FUNCTION AppService.createNewUser WITH {\"displayName\":\"John Doe\",\"email\":\"john.doe@example.com\",\"auth\":{\"loginName\":\"john.doe\",\"password\":\"password\"}}\nLOG [AppController] RETURNED ENDPOINT AppController.createNewUser (AppController::/[GET])\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.blockquote className="remark-callout remark-callout__info">{"\n"}<_components.header className="remark-callout-header"><_components.svg xmlns="http://www.w3.org/2000/svg" className="lucide-info" width="32" height="32" viewBox="0 0 24 24"><_components.g fill="none" stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2"><_components.circle cx="12" cy="12" r="10" /><_components.path d="M12 16v-4m0-4h.01" /></_components.g></_components.svg>{"Info"}</_components.header>{"\n"}<_components.p>{"In the example above, we only covered parameters for Services, but you can use them in the same way with any method where log decorators can be applied, such as Controllers."}</_components.p>{"\n"}</_components.blockquote>{"\n"}<_components.hr />{"\n"}<_components.h1 id="logging-return-values">{"Logging Return Values"}</_components.h1>{"\n"}<_components.p>{"You can include the return value of a method in the log by using the "}<_components.code>{"@Returns()"}</_components.code>{" decorator."}</_components.p>{"\n"}<_components.p>{"The parameters of "}<_components.code>{"@Returns()"}</_components.code>{" are almost identical to those of "}<_components.code>{"@Logged()"}</_components.code>{". Therefore, you can use "}<_components.code>{"@Returns()"}</_components.code>{" in a similar way to "}<_components.code>{"@Logged()"}</_components.code>{"."}</_components.p>{"\n"}<_components.p>{"However, one difference is that unlike "}<_components.code>{"@Logged()"}</_components.code>{", "}<_components.code>{"@Returns()"}</_components.code>{" doesn't require a "}<_components.code>{"name"}</_components.code>{"."}</_components.p>{"\n"}<_components.ul>{"\n"}<_components.li>{"If used without any parameters, it outputs the entire return value."}</_components.li>{"\n"}</_components.ul>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"app.service.ts"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"Logged"}</_components.span>{", "}<_components.span className="hljs-title class_">{"LoggedInjectable"}</_components.span>{", "}<_components.span className="hljs-title class_">{"Returns"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'nestlogged'"}</_components.span>{";\n\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"interface"}</_components.span>{" "}<_components.span className="hljs-title class_">{"UserData"}</_components.span>{" {\n  "}<_components.span className="hljs-attr">{"displayName"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n  "}<_components.span className="hljs-attr">{"email"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n  "}<_components.span className="hljs-attr">{"auth"}</_components.span>{": {\n    "}<_components.span className="hljs-attr">{"loginName"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n    "}<_components.span className="hljs-attr">{"password"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n  };\n}\n\n"}<_components.span className="hljs-meta">{"@LoggedInjectable"}</_components.span>{"()\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"class"}</_components.span>{" "}<_components.span className="hljs-title class_">{"AppService"}</_components.span>{" {\n  "}<_components.span className="hljs-meta">{"@Returns"}</_components.span>{"() "}<_components.span className="hljs-comment">{"// We want to log the return value."}</_components.span>{"\n  "}<_components.span className="hljs-title function_">{"createNewUser"}</_components.span>{"("}<_components.span className="hljs-params">{"\n    "}<_components.span className="hljs-meta">{"@Logged"}</_components.span>{"({\n      displayName: "}<_components.span className="hljs-string">{"'displayName'"}</_components.span>{",\n      email: "}<_components.span className="hljs-string">{"'email'"}</_components.span>{",\n      loginName: "}<_components.span className="hljs-string">{"'auth.loginName'"}</_components.span>{",\n    })\n    "}<_components.span className="hljs-attr">{"newUserData"}</_components.span>{": "}<_components.span className="hljs-title class_">{"UserData"}</_components.span>{",\n  "}</_components.span>{") {\n    "}<_components.span className="hljs-comment">{"// create new user"}</_components.span>{"\n    "}<_components.span className="hljs-keyword">{"return"}</_components.span>{" newUserData;\n  }\n}\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"Log Output"}</_components.div><_components.div className="remark-code-meta__lang">{"Log"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-log" data-language="log">{"LOG [AppController] HIT ENDPOINT AppController.createNewUser (AppController::/[GET])\nLOG [AppService] HIT FUNCTION AppService.createNewUser WITH displayName=John Doe, email=john.doe@example.com, loginName=john.doe\nLOG [AppService] RETURNED FUNCTION AppService.createNewUser WITH {\"displayName\":\"John Doe\",\"email\":\"john.doe@example.com\",\"auth\":{\"loginName\":\"john.doe\",\"password\":\"password\"}}\nLOG [AppController] RETURNED ENDPOINT AppController.createNewUser (AppController::/[GET])\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.ul>{"\n"}<_components.li>{"You can also use the name and options parameters of "}<_components.code>{"@Logged()"}</_components.code>{"."}</_components.li>{"\n"}</_components.ul>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"app.service.ts"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"Logged"}</_components.span>{", "}<_components.span className="hljs-title class_">{"LoggedInjectable"}</_components.span>{", "}<_components.span className="hljs-title class_">{"Returns"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'nestlogged'"}</_components.span>{";\n\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"interface"}</_components.span>{" "}<_components.span className="hljs-title class_">{"UserData"}</_components.span>{" {\n  "}<_components.span className="hljs-attr">{"displayName"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n  "}<_components.span className="hljs-attr">{"email"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n  "}<_components.span className="hljs-attr">{"auth"}</_components.span>{": {\n    "}<_components.span className="hljs-attr">{"loginName"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n    "}<_components.span className="hljs-attr">{"password"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n  };\n}\n\n"}<_components.span className="hljs-meta">{"@LoggedInjectable"}</_components.span>{"()\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"class"}</_components.span>{" "}<_components.span className="hljs-title class_">{"AppService"}</_components.span>{" {\n  "}<_components.span className="hljs-meta">{"@Returns"}</_components.span>{"("}<_components.span className="hljs-string">{"'createdUser'"}</_components.span>{", { "}<_components.span className="hljs-attr">{"excludePath"}</_components.span>{": ["}<_components.span className="hljs-string">{"'auth.password'"}</_components.span>{"] })\n  "}<_components.span className="hljs-title function_">{"createNewUser"}</_components.span>{"("}<_components.span className="hljs-params">{"\n    "}<_components.span className="hljs-meta">{"@Logged"}</_components.span>{"({\n      displayName: "}<_components.span className="hljs-string">{"'displayName'"}</_components.span>{",\n      email: "}<_components.span className="hljs-string">{"'email'"}</_components.span>{",\n      loginName: "}<_components.span className="hljs-string">{"'auth.loginName'"}</_components.span>{",\n    })\n    "}<_components.span className="hljs-attr">{"newUserData"}</_components.span>{": "}<_components.span className="hljs-title class_">{"UserData"}</_components.span>{",\n  "}</_components.span>{") {\n    "}<_components.span className="hljs-comment">{"// create new user"}</_components.span>{"\n    "}<_components.span className="hljs-keyword">{"return"}</_components.span>{" newUserData;\n  }\n}\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"Log Output"}</_components.div><_components.div className="remark-code-meta__lang">{"Log"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-log" data-language="log">{"LOG [AppController] HIT ENDPOINT AppController.createNewUser (AppController::/[GET])\nLOG [AppService] HIT FUNCTION AppService.createNewUser WITH displayName=John Doe, email=john.doe@example.com, loginName=john.doe\nLOG [AppService] RETURNED FUNCTION AppService.createNewUser WITH createdUser={\"displayName\":\"John Doe\",\"email\":\"john.doe@example.com\",\"auth\":{\"loginName\":\"john.doe\"}}\nLOG [AppController] RETURNED ENDPOINT AppController.createNewUser (AppController::/[GET])\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.ul>{"\n"}<_components.li>{"Or, you can use Each."}</_components.li>{"\n"}</_components.ul>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"app.service.ts"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"Logged"}</_components.span>{", "}<_components.span className="hljs-title class_">{"LoggedInjectable"}</_components.span>{", "}<_components.span className="hljs-title class_">{"Returns"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'nestlogged'"}</_components.span>{";\n\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"interface"}</_components.span>{" "}<_components.span className="hljs-title class_">{"UserData"}</_components.span>{" {\n  "}<_components.span className="hljs-attr">{"displayName"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n  "}<_components.span className="hljs-attr">{"email"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n  "}<_components.span className="hljs-attr">{"auth"}</_components.span>{": {\n    "}<_components.span className="hljs-attr">{"loginName"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n    "}<_components.span className="hljs-attr">{"password"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n  };\n}\n\n"}<_components.span className="hljs-meta">{"@LoggedInjectable"}</_components.span>{"()\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"class"}</_components.span>{" "}<_components.span className="hljs-title class_">{"AppService"}</_components.span>{" {\n  "}<_components.span className="hljs-meta">{"@Returns"}</_components.span>{"({\n    "}<_components.span className="hljs-attr">{"displayName"}</_components.span>{": "}<_components.span className="hljs-string">{"'displayName'"}</_components.span>{",\n    "}<_components.span className="hljs-attr">{"email"}</_components.span>{": "}<_components.span className="hljs-string">{"'email'"}</_components.span>{",\n    "}<_components.span className="hljs-attr">{"loginName"}</_components.span>{": "}<_components.span className="hljs-string">{"'auth.loginName'"}</_components.span>{"\n  })\n  "}<_components.span className="hljs-title function_">{"createNewUser"}</_components.span>{"("}<_components.span className="hljs-params">{"\n    "}<_components.span className="hljs-meta">{"@Logged"}</_components.span>{"({\n      displayName: "}<_components.span className="hljs-string">{"'displayName'"}</_components.span>{",\n      email: "}<_components.span className="hljs-string">{"'email'"}</_components.span>{",\n      loginName: "}<_components.span className="hljs-string">{"'auth.loginName'"}</_components.span>{",\n    })\n    "}<_components.span className="hljs-attr">{"newUserData"}</_components.span>{": "}<_components.span className="hljs-title class_">{"UserData"}</_components.span>{",\n  "}</_components.span>{") {\n    "}<_components.span className="hljs-comment">{"// create new user"}</_components.span>{"\n    "}<_components.span className="hljs-keyword">{"return"}</_components.span>{" newUserData;\n  }\n}\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"Log Output"}</_components.div><_components.div className="remark-code-meta__lang">{"Log"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-log" data-language="log">{"LOG [AppController] HIT ENDPOINT AppController.createNewUser (AppController::/[GET])\nLOG [AppService] HIT FUNCTION AppService.createNewUser WITH displayName=John Doe, email=john.doe@example.com, loginName=john.doe\nLOG [AppService] RETURNED FUNCTION AppService.createNewUser WITH displayName=John Doe, email=john.doe@example.com, loginName=john.doe\nLOG [AppController] RETURNED ENDPOINT AppController.createNewUser (AppController::/[GET])\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.blockquote className="remark-callout remark-callout__info">{"\n"}<_components.header className="remark-callout-header"><_components.svg xmlns="http://www.w3.org/2000/svg" className="lucide-info" width="32" height="32" viewBox="0 0 24 24"><_components.g fill="none" stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2"><_components.circle cx="12" cy="12" r="10" /><_components.path d="M12 16v-4m0-4h.01" /></_components.g></_components.svg>{"Info"}</_components.header>{"\n"}<_components.p>{"In the example above, we only covered parameters for Services, but you can use them in the same way with any method where log decorators can be applied, such as Controllers."}</_components.p>{"\n"}</_components.blockquote>{"\n"}<_components.hr />{"\n"}<_components.h1 id="logger-injection">{"Logger Injection"}</_components.h1>{"\n"}<_components.p>{"We've learned how to log the call and return of functions, as well as their inputs and outputs."}</_components.p>{"\n"}<_components.p>{"Now let's see how to leave logs directly within functions."}</_components.p>{"\n"}<_components.h2 id="injectlogger">{"InjectLogger"}</_components.h2>{"\n"}<_components.p>{"You can receive a logger as a function parameter by using the "}<_components.code>{"@InjectLogger"}</_components.code>{" decorator."}</_components.p>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"app.controller.ts"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"Get"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'@nestjs/common'"}</_components.span>{";\n"}<_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"AppService"}</_components.span>{", "}<_components.span className="hljs-title class_">{"UserData"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'./app.service'"}</_components.span>{";\n"}<_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"InjectLogger"}</_components.span>{", "}<_components.span className="hljs-title class_">{"LoggedController"}</_components.span>{", "}<_components.span className="hljs-title class_">{"ScopedLogger"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'nestlogged'"}</_components.span>{";\n\n"}<_components.span className="hljs-meta">{"@LoggedController"}</_components.span>{"()\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"class"}</_components.span>{" "}<_components.span className="hljs-title class_">{"AppController"}</_components.span>{" {\n  "}<_components.span className="hljs-title function_">{"constructor"}</_components.span>{"("}<_components.span className="hljs-params"><_components.span className="hljs-keyword">{"private"}</_components.span>{" "}<_components.span className="hljs-keyword">{"readonly"}</_components.span>{" "}<_components.span className="hljs-attr">{"appService"}</_components.span>{": "}<_components.span className="hljs-title class_">{"AppService"}</_components.span></_components.span>{") {}\n\n  "}<_components.span className="hljs-meta">{"@Get"}</_components.span>{"()\n  "}<_components.span className="hljs-title function_">{"createNewUser"}</_components.span>{"("}<_components.span className="hljs-meta">{"@InjectLogger"}</_components.span>{" "}<_components.span className="hljs-attr">{"logger"}</_components.span>{": "}<_components.span className="hljs-title class_">{"ScopedLogger"}</_components.span>{"): "}<_components.span className="hljs-title class_">{"UserData"}</_components.span>{" {\n    logger."}<_components.span className="hljs-title function_">{"log"}</_components.span>{"("}<_components.span className="hljs-string">{"`This is a log from injected logger!`"}</_components.span>{");\n\n    "}<_components.span className="hljs-keyword">{"return"}</_components.span>{" "}<_components.span className="hljs-variable language_">{"this"}</_components.span>{"."}<_components.span className="hljs-property">{"appService"}</_components.span>{"."}<_components.span className="hljs-title function_">{"createNewUser"}</_components.span>{"(\n      {\n        "}<_components.span className="hljs-attr">{"displayName"}</_components.span>{": "}<_components.span className="hljs-string">{"'John Doe'"}</_components.span>{",\n        "}<_components.span className="hljs-attr">{"email"}</_components.span>{": "}<_components.span className="hljs-string">{"'john.doe@example.com'"}</_components.span>{",\n        "}<_components.span className="hljs-attr">{"auth"}</_components.span>{": {\n          "}<_components.span className="hljs-attr">{"loginName"}</_components.span>{": "}<_components.span className="hljs-string">{"'john.doe'"}</_components.span>{",\n          "}<_components.span className="hljs-attr">{"password"}</_components.span>{": "}<_components.span className="hljs-string">{"'password'"}</_components.span>{",\n        },\n      },\n      logger,\n    );\n  }\n}\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"app.service.ts"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-keyword">{"import"}</_components.span>{" {\n  "}<_components.span className="hljs-title class_">{"InjectLogger"}</_components.span>{",\n  "}<_components.span className="hljs-title class_">{"Logged"}</_components.span>{",\n  "}<_components.span className="hljs-title class_">{"LoggedInjectable"}</_components.span>{",\n  "}<_components.span className="hljs-title class_">{"Returns"}</_components.span>{",\n  "}<_components.span className="hljs-title class_">{"ScopedLogger"}</_components.span>{",\n} "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'nestlogged'"}</_components.span>{";\n\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"interface"}</_components.span>{" "}<_components.span className="hljs-title class_">{"UserData"}</_components.span>{" {\n  "}<_components.span className="hljs-attr">{"displayName"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n  "}<_components.span className="hljs-attr">{"email"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n  "}<_components.span className="hljs-attr">{"auth"}</_components.span>{": {\n    "}<_components.span className="hljs-attr">{"loginName"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n    "}<_components.span className="hljs-attr">{"password"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n  };\n}\n\n"}<_components.span className="hljs-meta">{"@LoggedInjectable"}</_components.span>{"()\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"class"}</_components.span>{" "}<_components.span className="hljs-title class_">{"AppService"}</_components.span>{" {\n  "}<_components.span className="hljs-meta">{"@Returns"}</_components.span>{"({\n    "}<_components.span className="hljs-attr">{"displayName"}</_components.span>{": "}<_components.span className="hljs-string">{"'displayName'"}</_components.span>{",\n    "}<_components.span className="hljs-attr">{"email"}</_components.span>{": "}<_components.span className="hljs-string">{"'email'"}</_components.span>{",\n    "}<_components.span className="hljs-attr">{"loginName"}</_components.span>{": "}<_components.span className="hljs-string">{"'auth.loginName'"}</_components.span>{",\n  })\n  "}<_components.span className="hljs-title function_">{"createNewUser"}</_components.span>{"("}<_components.span className="hljs-params">{"\n    "}<_components.span className="hljs-meta">{"@Logged"}</_components.span>{"({\n      displayName: "}<_components.span className="hljs-string">{"'displayName'"}</_components.span>{",\n      email: "}<_components.span className="hljs-string">{"'email'"}</_components.span>{",\n      loginName: "}<_components.span className="hljs-string">{"'auth.loginName'"}</_components.span>{",\n    })\n    "}<_components.span className="hljs-attr">{"newUserData"}</_components.span>{": "}<_components.span className="hljs-title class_">{"UserData"}</_components.span>{",\n    "}<_components.span className="hljs-meta">{"@InjectLogger"}</_components.span>{" "}<_components.span className="hljs-attr">{"logger"}</_components.span>{": "}<_components.span className="hljs-title class_">{"ScopedLogger"}</_components.span>{",\n  "}</_components.span>{") {\n    "}<_components.span className="hljs-comment">{"// create new user"}</_components.span>{"\n    logger."}<_components.span className="hljs-title function_">{"log"}</_components.span>{"("}<_components.span className="hljs-string">{"`User created: "}<_components.span className="hljs-subst">{"${newUserData.displayName}"}</_components.span>{"`"}</_components.span>{");\n    "}<_components.span className="hljs-keyword">{"return"}</_components.span>{" newUserData;\n  }\n}\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"Log Output"}</_components.div><_components.div className="remark-code-meta__lang">{"Log"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-log" data-language="log">{"LOG [AppController] ID=[d5IfszIYQXOFPh910xyaTA/0000000002] | AppController.createNewUser: HIT ENDPOINT AppController.createNewUser (AppController::/[GET])\nLOG [AppController] ID=[d5IfszIYQXOFPh910xyaTA/0000000002] | AppController.createNewUser: This is a log from injected logger!\nLOG [AppService] ID=[d5IfszIYQXOFPh910xyaTA/0000000002] | AppController.createNewUser -> AppService.createNewUser: HIT FUNCTION AppService.createNewUser WITH displayName=John Doe, email=john.doe@example.com, loginName=john.doe\nLOG [AppService] ID=[d5IfszIYQXOFPh910xyaTA/0000000002] | AppController.createNewUser -> AppService.createNewUser: User created: John Doe\nLOG [AppService] ID=[d5IfszIYQXOFPh910xyaTA/0000000002] | AppController.createNewUser -> AppService.createNewUser: RETURNED FUNCTION AppService.createNewUser WITH displayName=John Doe, email=john.doe@example.com, loginName=john.doe\nLOG [AppController] ID=[d5IfszIYQXOFPh910xyaTA/0000000002] | AppController.createNewUser: RETURNED ENDPOINT AppController.createNewUser (AppController::/[GET])\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.p>{"Logger injection additionally provides the following features:"}</_components.p>{"\n"}<_components.ol>{"\n"}<_components.li>{"You can see that the logs include an "}<_components.strong>{"ID"}</_components.strong>{". This ID is uniquely generated for each Request. It allows you to track individual Requests when logs from multiple simultaneous Requests are mixed. We call it "}<_components.strong>{"Request ID"}</_components.strong>{" or "}<_components.strong>{"Scope ID"}</_components.strong>{"."}</_components.li>{"\n"}<_components.li>{"You can see the "}<_components.strong>{"function call flow"}</_components.strong>{" for a Request, similar to a traceback. If an error occurs in your service, you can immediately identify which function execution caused the error with just one Request ID. We call it "}<_components.strong>{"Scope"}</_components.strong>{"."}</_components.li>{"\n"}</_components.ol>{"\n"}<_components.h2 id="accessing-scope">{"Accessing Scope"}</_components.h2>{"\n"}<_components.p>{"When you need to use the Request ID or Scope included in the logs, you can retrieve the values using ScopedLogger's methods."}</_components.p>{"\n"}<_components.ul>{"\n"}<_components.li><_components.code>{"ScopedLogger.getScopeId(): string"}</_components.code></_components.li>{"\n"}<_components.li><_components.code>{"ScopedLogger.getCurrentScope(): (string | string[])[]"}</_components.code></_components.li>{"\n"}</_components.ul>{"\n"}<_components.blockquote className="remark-callout remark-callout__warning">{"\n"}<_components.header className="remark-callout-header"><_components.svg xmlns="http://www.w3.org/2000/svg" className="lucide-warning" width="32" height="32" viewBox="0 0 24 24"><_components.path fill="none" stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="m21.73 18l-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3M12 9v4m0 4h.01" /></_components.svg>{"Warning"}</_components.header>{"\n"}<_components.p>{"Using these functions in actual application logic (such as database IDs) is not recommended."}<_components.br />{"\n"}{"This feature was created to expose request IDs to users to make debugging easier when errors occur."}</_components.p>{"\n"}</_components.blockquote>{"\n"}<_components.h2 id="understanding-type-errors">{"Understanding Type Errors"}</_components.h2>{"\n"}<_components.p>{"When you add a "}<_components.code>{"logger"}</_components.code>{" parameter to a function using the "}<_components.code>{"@InjectLogger"}</_components.code>{" decorator, you'll get a type error if you call the function directly without providing a logger."}</_components.p>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"Example"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-variable language_">{"this"}</_components.span>{"."}<_components.span className="hljs-property">{"appService"}</_components.span>{"."}<_components.span className="hljs-title function_">{"createNewUser"}</_components.span>{"(userData) "}<_components.span className="hljs-comment">{"// Type error because we didn't provide a logger!"}</_components.span>{"\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.p>{"However, a runtime error will "}<_components.strong>{"not occur"}</_components.strong>{".\nThis happens because decorators cannot change the function's type."}</_components.p>{"\n"}<_components.p>{"To put it simply, if an instance of "}<_components.code>{"ScopedLogger"}</_components.code>{" is not provided to a parameter with "}<_components.code>{"@InjectLogger"}</_components.code>{", NestLogged automatically "}<_components.strong>{"provides a new "}<_components.code>{"ScopedLogger"}</_components.code>{" instance"}</_components.strong>{"."}</_components.p>{"\n"}<_components.p>{"In other words, the "}<_components.code>{"@InjectLogger"}</_components.code>{" parameter always exists (unless there's an internal error in NestLogged), whether it was provided in the function call or not."}</_components.p>{"\n"}<_components.p>{"Therefore, you can easily solve this type error by using optional chaining ("}<_components.code>{"logger?.log"}</_components.code>{") or non-null assertion ("}<_components.code>{"logger!"}</_components.code>{")."}</_components.p>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"app.service.ts"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-title function_">{"createNewUser"}</_components.span>{"("}<_components.span className="hljs-params"><_components.span className="hljs-meta">{"@InjectLogger"}</_components.span>{" "}<_components.span className="hljs-attr">{"_logger"}</_components.span>{"?: "}<_components.span className="hljs-title class_">{"ScopedLogger"}</_components.span></_components.span>{") {\n  "}<_components.span className="hljs-comment">{"// logger is ScopedLogger | undefined, but it's actually always ScopedLogger."}</_components.span>{"\n  "}<_components.span className="hljs-keyword">{"const"}</_components.span>{" logger = _logger! "}<_components.span className="hljs-comment">{"// So it's safe to use non-null assertion."}</_components.span>{"\n}\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.hr />{"\n"}<_components.h1 id="other-special-log-decorators">{"Other Special Log Decorators"}</_components.h1>{"\n"}<_components.p>{"So far, we've only covered Controllers and Services."}</_components.p>{"\n"}<_components.p>{"NestLogged also supports log decorators for Guards, Interceptors, ExceptionFilters, and Middlewares."}</_components.p>{"\n"}<_components.ul>{"\n"}<_components.li>{"Guard = "}<_components.code>{"LoggedGuard"}</_components.code></_components.li>{"\n"}<_components.li>{"Interceptor = "}<_components.code>{"LoggedInterceptor"}</_components.code></_components.li>{"\n"}<_components.li>{"ExceptionFilter = "}<_components.code>{"LoggedExceptionFilter"}</_components.code></_components.li>{"\n"}<_components.li>{"Middleware = "}<_components.code>{"LoggedMiddleware"}</_components.code></_components.li>{"\n"}</_components.ul>{"\n"}<_components.h2 id="loggedguard">{"LoggedGuard"}</_components.h2>{"\n"}<_components.p>{"Here's how to apply "}<_components.code>{"@LoggedGuard"}</_components.code>{" to a Guard:"}</_components.p>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"app.guard.ts"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"CanActivate"}</_components.span>{", "}<_components.span className="hljs-title class_">{"ExecutionContext"}</_components.span>{", "}<_components.span className="hljs-title class_">{"Injectable"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'@nestjs/common'"}</_components.span>{";\n"}<_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"LoggedGuard"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'nestlogged'"}</_components.span>{";\n"}<_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"Observable"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'rxjs'"}</_components.span>{";\n\n"}<_components.span className="hljs-meta">{"@Injectable"}</_components.span>{"() "}<_components.span className="hljs-comment">{"// Don't use LoggedInjectable for Guards"}</_components.span>{"\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"class"}</_components.span>{" "}<_components.span className="hljs-title class_">{"AppGuard"}</_components.span>{" "}<_components.span className="hljs-keyword">{"implements"}</_components.span>{" "}<_components.span className="hljs-title class_">{"CanActivate"}</_components.span>{" {\n  "}<_components.span className="hljs-meta">{"@LoggedGuard"}</_components.span>{"() "}<_components.span className="hljs-comment">{"// Instead, use @LoggedGuard on the method"}</_components.span>{"\n  "}<_components.span className="hljs-title function_">{"canActivate"}</_components.span>{"(\n    "}<_components.span className="hljs-attr">{"context"}</_components.span>{": "}<_components.span className="hljs-title class_">{"ExecutionContext"}</_components.span>{",\n  ): "}<_components.span className="hljs-built_in">{"boolean"}</_components.span>{" | "}<_components.span className="hljs-title class_">{"Promise"}</_components.span>{"<"}<_components.span className="hljs-built_in">{"boolean"}</_components.span>{"> | "}<_components.span className="hljs-title class_">{"Observable"}</_components.span>{"<"}<_components.span className="hljs-built_in">{"boolean"}</_components.span>{"> {\n    "}<_components.span className="hljs-keyword">{"return"}</_components.span>{" "}<_components.span className="hljs-literal">{"true"}</_components.span>{";\n  }\n}\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.h2 id="loggedinterceptor">{"LoggedInterceptor"}</_components.h2>{"\n"}<_components.p>{"Here's how to apply "}<_components.code>{"@LoggedInterceptor"}</_components.code>{" to an Interceptor:"}</_components.p>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"app.interceptor.ts"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-keyword">{"import"}</_components.span>{" {\n  "}<_components.span className="hljs-title class_">{"CallHandler"}</_components.span>{",\n  "}<_components.span className="hljs-title class_">{"ExecutionContext"}</_components.span>{",\n  "}<_components.span className="hljs-title class_">{"Injectable"}</_components.span>{",\n  "}<_components.span className="hljs-title class_">{"NestInterceptor"}</_components.span>{",\n} "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'@nestjs/common'"}</_components.span>{";\n"}<_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"LoggedInterceptor"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'nestlogged'"}</_components.span>{";\n"}<_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"Observable"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'rxjs'"}</_components.span>{";\n\n"}<_components.span className="hljs-meta">{"@Injectable"}</_components.span>{"() "}<_components.span className="hljs-comment">{"// Instead of @LoggedInjectable"}</_components.span>{"\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"class"}</_components.span>{" "}<_components.span className="hljs-title class_">{"AppInterceptor"}</_components.span>{" "}<_components.span className="hljs-keyword">{"implements"}</_components.span>{" "}<_components.span className="hljs-title class_">{"NestInterceptor"}</_components.span>{" {\n  "}<_components.span className="hljs-meta">{"@LoggedInterceptor"}</_components.span>{"() "}<_components.span className="hljs-comment">{"// Use @LoggedInterceptor on the method"}</_components.span>{"\n  "}<_components.span className="hljs-title function_">{"intercept"}</_components.span>{"("}<_components.span className="hljs-attr">{"context"}</_components.span>{": "}<_components.span className="hljs-title class_">{"ExecutionContext"}</_components.span>{", "}<_components.span className="hljs-attr">{"next"}</_components.span>{": "}<_components.span className="hljs-title class_">{"CallHandler"}</_components.span>{"): "}<_components.span className="hljs-title class_">{"Observable"}</_components.span>{"<"}<_components.span className="hljs-built_in">{"any"}</_components.span>{"> {\n    "}<_components.span className="hljs-keyword">{"return"}</_components.span>{" next."}<_components.span className="hljs-title function_">{"handle"}</_components.span>{"();\n  }\n}\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.h2 id="loggedexceptionfilter">{"LoggedExceptionFilter"}</_components.h2>{"\n"}<_components.p>{"Here's how to apply "}<_components.code>{"@LoggedExceptionFilter"}</_components.code>{" to an Exception Filter:"}</_components.p>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"app.filter.ts"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"ArgumentsHost"}</_components.span>{", "}<_components.span className="hljs-title class_">{"Catch"}</_components.span>{", "}<_components.span className="hljs-title class_">{"ExceptionFilter"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'@nestjs/common'"}</_components.span>{";\n"}<_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"LoggedExceptionFilter"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'nestlogged'"}</_components.span>{";\n\n"}<_components.span className="hljs-meta">{"@Catch"}</_components.span>{"()\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"class"}</_components.span>{" "}<_components.span className="hljs-title class_">{"AppFilter"}</_components.span>{"<T> "}<_components.span className="hljs-keyword">{"implements"}</_components.span>{" "}<_components.span className="hljs-title class_">{"ExceptionFilter"}</_components.span>{" {\n  "}<_components.span className="hljs-meta">{"@LoggedExceptionFilter"}</_components.span>{"() "}<_components.span className="hljs-comment">{"// Use @LoggedExceptionFilter on the method"}</_components.span>{"\n  "}<_components.span className="hljs-keyword">{"catch"}</_components.span>{"("}<_components.span className="hljs-attr">{"exception"}</_components.span>{": T, "}<_components.span className="hljs-attr">{"host"}</_components.span>{": "}<_components.span className="hljs-title class_">{"ArgumentsHost"}</_components.span>{") {}\n}\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.h2 id="loggedmiddleware">{"LoggedMiddleware"}</_components.h2>{"\n"}<_components.p>{"Here's how to apply "}<_components.code>{"@LoggedMiddleware"}</_components.code>{" to a class Middleware:"}</_components.p>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"app.middleware.ts"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"ArgumentsHost"}</_components.span>{", "}<_components.span className="hljs-title class_">{"Catch"}</_components.span>{", "}<_components.span className="hljs-title class_">{"ExceptionFilter"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'@nestjs/common'"}</_components.span>{";\n"}<_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"LoggedExceptionFilter"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'nestlogged'"}</_components.span>{";\n\n"}<_components.span className="hljs-meta">{"@Catch"}</_components.span>{"()\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"class"}</_components.span>{" "}<_components.span className="hljs-title class_">{"AppFilter"}</_components.span>{"<T> "}<_components.span className="hljs-keyword">{"implements"}</_components.span>{" "}<_components.span className="hljs-title class_">{"ExceptionFilter"}</_components.span>{" {\n  "}<_components.span className="hljs-meta">{"@LoggedExceptionFilter"}</_components.span>{"() "}<_components.span className="hljs-comment">{"// Use @LoggedExceptionFilter on the method"}</_components.span>{"\n  "}<_components.span className="hljs-keyword">{"catch"}</_components.span>{"("}<_components.span className="hljs-attr">{"exception"}</_components.span>{": T, "}<_components.span className="hljs-attr">{"host"}</_components.span>{": "}<_components.span className="hljs-title class_">{"ArgumentsHost"}</_components.span>{") {}\n}\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.blockquote className="remark-callout remark-callout__error">{"\n"}<_components.header className="remark-callout-header"><_components.svg xmlns="http://www.w3.org/2000/svg" className="lucide-danger" width="32" height="32" viewBox="0 0 24 24"><_components.path fill="none" stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 14a1 1 0 0 1-.78-1.63l9.9-10.2a.5.5 0 0 1 .86.46l-1.92 6.02A1 1 0 0 0 13 10h7a1 1 0 0 1 .78 1.63l-9.9 10.2a.5.5 0 0 1-.86-.46l1.92-6.02A1 1 0 0 0 11 14z" /></_components.svg>{"Danger"}</_components.header>{"\n"}<_components.p>{"Middleware can be implemented in two forms: class middleware and function middleware."}</_components.p>{"\n"}<_components.p>{"TypeScript does not support decorators for functions that are not class methods, so currently there is no way to apply "}<_components.code>{"@LoggedMiddleware"}</_components.code>{" to function implementations rather than class implementations."}</_components.p>{"\n"}<_components.p>{"Support for function Middleware will be added in a future version soon."}</_components.p>{"\n"}</_components.blockquote>{"\n"}<_components.h2 id="using-injectlogger">{"Using InjectLogger"}</_components.h2>{"\n"}<_components.p>{"You can also use "}<_components.code>{"@InjectLogger"}</_components.code>{" inside Middleware, Filter, Guard, and Interceptor to access the logger internally, and the Request ID is shared."}</_components.p>{"\n"}<_components.p>{"However, due to the "}<_components.code>{"implements"}</_components.code>{" syntax forcing the function type, you must add the type as optional."}</_components.p>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"app.guard.ts"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-meta">{"@Injectable"}</_components.span>{"()\n"}<_components.span className="hljs-keyword">{"export"}</_components.span>{" "}<_components.span className="hljs-keyword">{"class"}</_components.span>{" "}<_components.span className="hljs-title class_">{"AppGuard"}</_components.span>{" "}<_components.span className="hljs-keyword">{"implements"}</_components.span>{" "}<_components.span className="hljs-title class_">{"CanActivate"}</_components.span>{" {\n  "}<_components.span className="hljs-meta">{"@LoggedGuard"}</_components.span>{"()\n  "}<_components.span className="hljs-title function_">{"canActivate"}</_components.span>{"(\n    "}<_components.span className="hljs-attr">{"context"}</_components.span>{": "}<_components.span className="hljs-title class_">{"ExecutionContext"}</_components.span>{",\n    "}<_components.span className="hljs-meta">{"@InjectLogger"}</_components.span>{" "}<_components.span className="hljs-attr">{"logger"}</_components.span>{": "}<_components.span className="hljs-title class_">{"ScopedLogger"}</_components.span>{", "}<_components.span className="hljs-comment">{"// This will cause an error"}</_components.span>{"\n    "}<_components.span className="hljs-meta">{"@InjectLogger"}</_components.span>{" "}<_components.span className="hljs-attr">{"logger"}</_components.span>{"?: "}<_components.span className="hljs-title class_">{"ScopedLogger"}</_components.span>{", "}<_components.span className="hljs-comment">{"// This will not cause an error"}</_components.span>{"\n  ): "}<_components.span className="hljs-built_in">{"boolean"}</_components.span>{" | "}<_components.span className="hljs-title class_">{"Promise"}</_components.span>{"<"}<_components.span className="hljs-built_in">{"boolean"}</_components.span>{"> | "}<_components.span className="hljs-title class_">{"Observable"}</_components.span>{"<"}<_components.span className="hljs-built_in">{"boolean"}</_components.span>{"> {\n    "}<_components.span className="hljs-keyword">{"return"}</_components.span>{" "}<_components.span className="hljs-literal">{"true"}</_components.span>{";\n  }\n}\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.hr />{"\n"}<_components.h1 id="additional-json-output">{"Additional: JSON Output"}</_components.h1>{"\n"}<_components.p>{"You can provide options to the ConsoleLogger to output in JSON format as follows:"}</_components.p>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"main.ts"}</_components.div><_components.div className="remark-code-meta__lang">{"TypeScript"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-ts" data-language="ts"><_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"NestFactory"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'@nestjs/core'"}</_components.span>{";\n"}<_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"AppModule"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'./app.module'"}</_components.span>{";\n"}<_components.span className="hljs-keyword">{"import"}</_components.span>{" { "}<_components.span className="hljs-title class_">{"ConsoleLogger"}</_components.span>{" } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"'nestlogged'"}</_components.span>{";\n\n"}<_components.span className="hljs-keyword">{"async"}</_components.span>{" "}<_components.span className="hljs-keyword">{"function"}</_components.span>{" "}<_components.span className="hljs-title function_">{"bootstrap"}</_components.span>{"("}<_components.span className="hljs-params" />{") {\n  "}<_components.span className="hljs-keyword">{"const"}</_components.span>{" app = "}<_components.span className="hljs-keyword">{"await"}</_components.span>{" "}<_components.span className="hljs-title class_">{"NestFactory"}</_components.span>{"."}<_components.span className="hljs-title function_">{"create"}</_components.span>{"("}<_components.span className="hljs-title class_">{"AppModule"}</_components.span>{", {\n    "}<_components.span className="hljs-attr">{"logger"}</_components.span>{": "}<_components.span className="hljs-keyword">{"new"}</_components.span>{" "}<_components.span className="hljs-title class_">{"ConsoleLogger"}</_components.span>{"({\n      "}<_components.span className="hljs-attr">{"json"}</_components.span>{": "}<_components.span className="hljs-literal">{"true"}</_components.span>{",\n    }),\n  });\n  "}<_components.span className="hljs-keyword">{"await"}</_components.span>{" app."}<_components.span className="hljs-title function_">{"listen"}</_components.span>{"(process."}<_components.span className="hljs-property">{"env"}</_components.span>{"."}<_components.span className="hljs-property">{"PORT"}</_components.span>{" ?? "}<_components.span className="hljs-number">{"3000"}</_components.span>{");\n}\n"}<_components.span className="hljs-title function_">{"bootstrap"}</_components.span>{"();\n"}</_components.code></_components.pre></_components.div>{"\n"}<_components.div className="remark-code-meta-wrapper"><_components.div className="remark-code-meta-block"><_components.div className="remark-code-meta__filename">{"Console Output"}</_components.div><_components.div className="remark-code-meta__lang">{"undefined"}</_components.div></_components.div><_components.pre><_components.code className="hljs language-json" data-language="json"><_components.span className="hljs-punctuation">{"{"}</_components.span><_components.span className="hljs-attr">{"\"level\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-string">{"\"log\""}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-attr">{"\"pid\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-number">{"11910"}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-attr">{"\"timestamp\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-number">{"1748333891753"}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-attr">{"\"message\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-string">{"\"HIT ENDPOINT AppController.createNewUser (AppController::/[GET]) \""}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-attr">{"\"scopeId\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-string">{"\"13DX8fdLQpe3jO8ECpdS3Q/0000000002\""}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-attr">{"\"scope\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-punctuation">{"["}</_components.span><_components.span className="hljs-punctuation">{"["}</_components.span><_components.span className="hljs-string">{"\"AppController\""}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-string">{"\"createNewUser\""}</_components.span><_components.span className="hljs-punctuation">{"]"}</_components.span><_components.span className="hljs-punctuation">{"]"}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-attr">{"\"context\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-string">{"\"AppController\""}</_components.span><_components.span className="hljs-punctuation">{"}"}</_components.span>{"\n"}<_components.span className="hljs-punctuation">{"{"}</_components.span><_components.span className="hljs-attr">{"\"level\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-string">{"\"log\""}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-attr">{"\"pid\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-number">{"11910"}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-attr">{"\"timestamp\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-number">{"1748333891753"}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-attr">{"\"message\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-string">{"\"This is a log from injected logger!\""}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-attr">{"\"scopeId\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-string">{"\"13DX8fdLQpe3jO8ECpdS3Q/0000000002\""}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-attr">{"\"scope\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-punctuation">{"["}</_components.span><_components.span className="hljs-punctuation">{"["}</_components.span><_components.span className="hljs-string">{"\"AppController\""}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-string">{"\"createNewUser\""}</_components.span><_components.span className="hljs-punctuation">{"]"}</_components.span><_components.span className="hljs-punctuation">{"]"}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-attr">{"\"context\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-string">{"\"AppController\""}</_components.span><_components.span className="hljs-punctuation">{"}"}</_components.span>{"\n"}<_components.span className="hljs-punctuation">{"{"}</_components.span><_components.span className="hljs-attr">{"\"level\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-string">{"\"log\""}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-attr">{"\"pid\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-number">{"11910"}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-attr">{"\"timestamp\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-number">{"1748333891753"}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-attr">{"\"message\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-string">{"\"HIT FUNCTION AppService.createNewUser WITH displayName=John Doe, email=john.doe@example.com, loginName=john.doe\""}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-attr">{"\"scopeId\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-string">{"\"13DX8fdLQpe3jO8ECpdS3Q/0000000002\""}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-attr">{"\"scope\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-punctuation">{"["}</_components.span><_components.span className="hljs-punctuation">{"["}</_components.span><_components.span className="hljs-string">{"\"AppController\""}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-string">{"\"createNewUser\""}</_components.span><_components.span className="hljs-punctuation">{"]"}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-punctuation">{"["}</_components.span><_components.span className="hljs-string">{"\"AppService\""}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-string">{"\"createNewUser\""}</_components.span><_components.span className="hljs-punctuation">{"]"}</_components.span><_components.span className="hljs-punctuation">{"]"}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-attr">{"\"context\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-string">{"\"AppService\""}</_components.span><_components.span className="hljs-punctuation">{"}"}</_components.span>{"\n"}<_components.span className="hljs-punctuation">{"{"}</_components.span><_components.span className="hljs-attr">{"\"level\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-string">{"\"log\""}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-attr">{"\"pid\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-number">{"11910"}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-attr">{"\"timestamp\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-number">{"1748333891753"}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-attr">{"\"message\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-string">{"\"User created: John Doe\""}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-attr">{"\"scopeId\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-string">{"\"13DX8fdLQpe3jO8ECpdS3Q/0000000002\""}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-attr">{"\"scope\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-punctuation">{"["}</_components.span><_components.span className="hljs-punctuation">{"["}</_components.span><_components.span className="hljs-string">{"\"AppController\""}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-string">{"\"createNewUser\""}</_components.span><_components.span className="hljs-punctuation">{"]"}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-punctuation">{"["}</_components.span><_components.span className="hljs-string">{"\"AppService\""}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-string">{"\"createNewUser\""}</_components.span><_components.span className="hljs-punctuation">{"]"}</_components.span><_components.span className="hljs-punctuation">{"]"}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-attr">{"\"context\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-string">{"\"AppService\""}</_components.span><_components.span className="hljs-punctuation">{"}"}</_components.span>{"\n"}<_components.span className="hljs-punctuation">{"{"}</_components.span><_components.span className="hljs-attr">{"\"level\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-string">{"\"log\""}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-attr">{"\"pid\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-number">{"11910"}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-attr">{"\"timestamp\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-number">{"1748333891753"}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-attr">{"\"message\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-string">{"\"RETURNED FUNCTION AppService.createNewUser WITH displayName=John Doe, email=john.doe@example.com, loginName=john.doe\""}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-attr">{"\"scopeId\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-string">{"\"13DX8fdLQpe3jO8ECpdS3Q/0000000002\""}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-attr">{"\"scope\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-punctuation">{"["}</_components.span><_components.span className="hljs-punctuation">{"["}</_components.span><_components.span className="hljs-string">{"\"AppController\""}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-string">{"\"createNewUser\""}</_components.span><_components.span className="hljs-punctuation">{"]"}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-punctuation">{"["}</_components.span><_components.span className="hljs-string">{"\"AppService\""}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-string">{"\"createNewUser\""}</_components.span><_components.span className="hljs-punctuation">{"]"}</_components.span><_components.span className="hljs-punctuation">{"]"}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-attr">{"\"context\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-string">{"\"AppService\""}</_components.span><_components.span className="hljs-punctuation">{"}"}</_components.span>{"\n"}<_components.span className="hljs-punctuation">{"{"}</_components.span><_components.span className="hljs-attr">{"\"level\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-string">{"\"log\""}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-attr">{"\"pid\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-number">{"11910"}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-attr">{"\"timestamp\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-number">{"1748333891753"}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-attr">{"\"message\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-string">{"\"RETURNED ENDPOINT AppController.createNewUser (AppController::/[GET]) \""}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-attr">{"\"scopeId\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-string">{"\"13DX8fdLQpe3jO8ECpdS3Q/0000000002\""}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-attr">{"\"scope\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-punctuation">{"["}</_components.span><_components.span className="hljs-punctuation">{"["}</_components.span><_components.span className="hljs-string">{"\"AppController\""}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-string">{"\"createNewUser\""}</_components.span><_components.span className="hljs-punctuation">{"]"}</_components.span><_components.span className="hljs-punctuation">{"]"}</_components.span><_components.span className="hljs-punctuation">{","}</_components.span><_components.span className="hljs-attr">{"\"context\""}</_components.span><_components.span className="hljs-punctuation">{":"}</_components.span><_components.span className="hljs-string">{"\"AppController\""}</_components.span><_components.span className="hljs-punctuation">{"}"}</_components.span>{"\n"}</_components.code></_components.pre></_components.div></>;
}
export default function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = props.components || ({});
  return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props} /></MDXLayout> : _createMdxContent(props);
}
